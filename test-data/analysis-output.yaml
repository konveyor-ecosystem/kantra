- description: This ruleset detects Java Native Interface (JNI) and Java Native Access (JNA) code, which may be problematic when migrating an application to a cloud environment.
  violations:
    jni-native-code-00000-test:
      description: |-
        Java native libraries (JNI, JNA)
        Java native libraries might not run in a cloud or container environment.. Recommendations. * Review the purpose of the native library in your application.. * Check whether the native library is compatible with a cloud environment.. * Reuse or embed the native library or application in a cloud environment, for example, in a JBoss module.. * Replace, remove, or rewrite the native library or application using a cloud-compatible equivalent.
      category: mandatory
      labels:
      - konveyor.io/target=cloud-readiness
      - konveyor.io/source
      - jni
      - ""
      incidents:
      - uri: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
        message: Java native libraries might not run in a cloud or container environment.. Recommendations. * Review the purpose of the native library in your application.. * Check whether the native library is compatible with a cloud environment.. * Reuse or embed the native library or application in a cloud environment, for example, in a JBoss module.. * Replace, remove, or rewrite the native library or application using a cloud-compatible equivalent.
        codeSnip: "  1  package io.konveyor.demo.config;\n  2  \n  3  import java.io.FileInputStream;\n  4  import java.io.InputStream;\n  5  import java.util.Properties;\n  6  \n  7  public class ApplicationConfiguration {\n  8  \n  9  \tprivate Properties config;\n 10  \n 11  \tpublic ApplicationConfiguration() {\n 12  \t\tsuper();\n 13  \t\tthis.config = loadProperties();\n 14  \n 15  \t}\n 16  \n 17  \tprivate Properties loadProperties() {\n 18  \t\tProperties properties = new Properties();\n 19  \n 20  \t\ttry (InputStream inputStream = new FileInputStream(\"/opt/config/persistence.properties\")) {\n 21  \n 22  \t\t\tproperties.load(inputStream);\n 23  \n 24  \t\t} catch (Exception e) {\n 25  \t\t\tSystem.out.println(\"Exception: \" + e);\n 26  \t\t}\n 27  \n 28  \t\treturn properties;\n 29  \t}\n 30  \n 31  \tpublic String getProperty (String name) {\n 32  \t\treturn config.getProperty(name);\n 33  \t}\n 34  \n 35  \n 36  \n 37  }\n"
        lineNumber: 13
        variables:
          file: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
          kind: Constructor
          name: ApplicationConfiguration
      - uri: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
        message: Java native libraries might not run in a cloud or container environment.. Recommendations. * Review the purpose of the native library in your application.. * Check whether the native library is compatible with a cloud environment.. * Reuse or embed the native library or application in a cloud environment, for example, in a JBoss module.. * Replace, remove, or rewrite the native library or application using a cloud-compatible equivalent.
        codeSnip: "  1  package io.konveyor.demo.config;\n  2  \n  3  import java.io.FileInputStream;\n  4  import java.io.InputStream;\n  5  import java.util.Properties;\n  6  \n  7  public class ApplicationConfiguration {\n  8  \n  9  \tprivate Properties config;\n 10  \n 11  \tpublic ApplicationConfiguration() {\n 12  \t\tsuper();\n 13  \t\tthis.config = loadProperties();\n 14  \n 15  \t}\n 16  \n 17  \tprivate Properties loadProperties() {\n 18  \t\tProperties properties = new Properties();\n 19  \n 20  \t\ttry (InputStream inputStream = new FileInputStream(\"/opt/config/persistence.properties\")) {\n 21  \n 22  \t\t\tproperties.load(inputStream);\n 23  \n 24  \t\t} catch (Exception e) {\n 25  \t\t\tSystem.out.println(\"Exception: \" + e);\n 26  \t\t}\n 27  \n 28  \t\treturn properties;\n 29  \t}\n 30  \n 31  \tpublic String getProperty (String name) {\n 32  \t\treturn config.getProperty(name);\n 33  \t}\n 34  \n 35  \n 36  \n 37  }\n"
        lineNumber: 22
        variables:
          file: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
          kind: Method
          name: loadProperties
      links:
      - url: https://access.redhat.com/solutions/229443
        title: How to load native libraries and access them via JNI in EAP (with or without a module)
      - url: https://access.redhat.com/solutions/1444643
        title: Is it supported to compile the JNI code as 32-bit shared libraries and use it in 64-bit compiled Java code ?
      effort: 7
- name: azure/springboot
  description: Identify Zipkin dependencies.
  tags:
  - Azure
  violations:
    eap-to-azure-appservice-certificates-001:
      description: |-
        Azure - The application loads certificates into a KeyStore
        Azure - The application loads certificates into a KeyStore
      category: optional
      labels:
      - konveyor.io/source=eap7
      - konveyor.io/source=eap
      - konveyor.io/target=azure-appservice
      incidents:
      - uri: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
        message: Azure - The application loads certificates into a KeyStore
        codeSnip: "  1  package io.konveyor.demo.config;\n  2  \n  3  import java.io.FileInputStream;\n  4  import java.io.InputStream;\n  5  import java.util.Properties;\n  6  \n  7  public class ApplicationConfiguration {\n  8  \n  9  \tprivate Properties config;\n 10  \n 11  \tpublic ApplicationConfiguration() {\n 12  \t\tsuper();\n 13  \t\tthis.config = loadProperties();\n 14  \n 15  \t}\n 16  \n 17  \tprivate Properties loadProperties() {\n 18  \t\tProperties properties = new Properties();\n 19  \n 20  \t\ttry (InputStream inputStream = new FileInputStream(\"/opt/config/persistence.properties\")) {\n 21  \n 22  \t\t\tproperties.load(inputStream);\n 23  \n 24  \t\t} catch (Exception e) {\n 25  \t\t\tSystem.out.println(\"Exception: \" + e);\n 26  \t\t}\n 27  \n 28  \t\treturn properties;\n 29  \t}\n 30  \n 31  \tpublic String getProperty (String name) {\n 32  \t\treturn config.getProperty(name);\n 33  \t}\n 34  \n 35  \n 36  \n 37  }\n"
        lineNumber: 13
        variables:
          file: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
          kind: Constructor
          name: ApplicationConfiguration
      - uri: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
        message: Azure - The application loads certificates into a KeyStore
        codeSnip: "  1  package io.konveyor.demo.config;\n  2  \n  3  import java.io.FileInputStream;\n  4  import java.io.InputStream;\n  5  import java.util.Properties;\n  6  \n  7  public class ApplicationConfiguration {\n  8  \n  9  \tprivate Properties config;\n 10  \n 11  \tpublic ApplicationConfiguration() {\n 12  \t\tsuper();\n 13  \t\tthis.config = loadProperties();\n 14  \n 15  \t}\n 16  \n 17  \tprivate Properties loadProperties() {\n 18  \t\tProperties properties = new Properties();\n 19  \n 20  \t\ttry (InputStream inputStream = new FileInputStream(\"/opt/config/persistence.properties\")) {\n 21  \n 22  \t\t\tproperties.load(inputStream);\n 23  \n 24  \t\t} catch (Exception e) {\n 25  \t\t\tSystem.out.println(\"Exception: \" + e);\n 26  \t\t}\n 27  \n 28  \t\treturn properties;\n 29  \t}\n 30  \n 31  \tpublic String getProperty (String name) {\n 32  \t\treturn config.getProperty(name);\n 33  \t}\n 34  \n 35  \n 36  \n 37  }\n"
        lineNumber: 22
        variables:
          file: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
          kind: Method
          name: loadProperties
      links:
      - url: https://docs.microsoft.com/en-us/azure/app-service/configure-language-java?pivots=platform-linux#initialize-the-java-key-store
        title: Configure a Java app for Azure App Service - Initialize the Java Key Store
      - url: https://docs.microsoft.com/en-us/azure/developer/java/migration/migrate-jboss-eap-to-jboss-eap-on-azure-app-service#inventory-all-certificates
        title: Migrate JBoss EAP applications to JBoss EAP on Azure App Service - Inventory all certificates
      effort: 5
  unmatched:
  - eap-to-azure-appservice-pom-001
  - spring-boot-to-azure-cache-redis-01000
  - azure-file-system-03000
  - azure-file-system-02000
  - spring-boot-to-azure-database-jdbc-01000
  - spring-boot-to-azure-feign-01000
  - spring-boot-to-azure-database-mongodb-02000
  - spring-boot-to-azure-static-content-01000
  - spring-boot-to-azure-jms-broker-01000
  - azure-password-01000
  - spring-boot-to-azure-identity-provider-01000
  - spring-boot-to-azure-schedule-job-01000
  - spring-boot-to-azure-eureka-01000
  - spring-boot-to-azure-zipkin-01000
  - eap-to-azure-appservice-datasource-driver-01000
  - eap-to-azure-appservice-environment-variables-001
  - azure-file-system-01000
- name: camel3
  description: Rules for changes between Camel 3.0 and Camel 4.0
  unmatched:
  - xml-removed-camel4-00002
  - xml-removed-camel4-00004
  - xml-removed-camel4-00003
  - xml-removed-camel4-00001
  - xml-removed-camel4-00007
  - xml-removed-camel4-00006
  - xml-removed-camel4-00005
  - xml-removed-camel4-00012
  - xml-removed-camel4-00010
  - xml-removed-camel4-00008
  - xml-removed-camel4-00014
  - xml-removed-camel4-00011
  - xml-removed-camel4-00017
  - xml-removed-camel4-00018
  - xml-removed-camel4-00021
  - xml-removed-camel4-00013
  - xml-removed-camel4-00015
  - xml-removed-camel4-00020
  - xml-removed-camel4-00019
  - xml-removed-camel4-00016
  - xml-removed-camel4-00022
  - xml-removed-camel4-00023
  - xml-removed-camel4-00024
  - xml-removed-camel4-00027
  - xml-removed-camel4-00028
  - xml-removed-camel4-00026
  - xml-removed-camel4-00025
  - xml-removed-camel4-00030
  - xml-removed-camel4-00032
  - xml-removed-camel4-00033
  - xml-removed-camel4-00029
  - xml-changedcomponent-camel4-00002
  - xml-changedcomponent-camel4-00001
  - xml-removed-camel4-00031
  - xml-removed-camel4-00034
- name: camel3/camel2
  description: This ruleset provides analysis with respect to the missing dependencies in Apache Camel 3 due to Java 11 adoption.
  violations:
    xml-java-versions-00001:
      description: |-
        'jaxb-api' Maven dependency missing
        `jaxb-api` Maven dependency missing.. Apache Camel 3 supports Java 11 and in this Java version JAXB modules have been removed from the JDK, therefore you will need to add them as Maven dependencies since there are couple of components rely on them:. ```Xml. <dependency>. <groupId>javax.xml.bind</groupId>. <artifactId>jaxb-api</artifactId>. <version>2.3.1</version>. </dependency>. ```
      category: potential
      labels:
      - konveyor.io/source=camel2
      - konveyor.io/source=camel
      - konveyor.io/target=camel3+
      - konveyor.io/target=camel
      incidents:
      - uri: file:///opt/input/source/pom.xml
        message: '`jaxb-api` Maven dependency missing.. Apache Camel 3 supports Java 11 and in this Java version JAXB modules have been removed from the JDK, therefore you will need to add them as Maven dependencies since there are couple of components rely on them:. ```Xml. <dependency>. <groupId>javax.xml.bind</groupId>. <artifactId>jaxb-api</artifactId>. <version>2.3.1</version>. </dependency>. ```'
        variables:
          data: dependencies
          innerText: "\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-servlet-api\n\t\t\t${tomcat.version}\n\t\t\tprovided\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-core\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-databind\n\t\t\n\t\t\n\t\t\torg.springframework.data\n\t\t\tspring-data-jpa\n\t\t\n\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-jdbc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-webmvc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-web\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework.boot\n\t\t\tspring-boot-starter-actuator\n\t\t\t2.5.0\n\t\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-jdbc\n\t\t\t${tomcat.version}\n\t\t\truntime\n\t\t\n\t\t\n\t\t\torg.hibernate\n\t\t\thibernate-entitymanager\n\t\t\t${hibernate.version}\n\t\t\n\t\t\n\t\t\torg.hibernate.validator\n\t\t\thibernate-validator\n\t\t\t${hibernate-validator.version}\n\t\t\n\t\t\n\t\t\tch.qos.logback\n\t\t\tlogback-classic\n\t\t\t1.1.7\n\t\t\n\t\t\n\t\t\tcom.oracle.database.jdbc\n\t\t\tojdbc8\n\t\t\t21.1.0.0\n\t\t\n\t\t\n\t\t\torg.postgresql\n\t\t\tpostgresql\n\t\t\t42.2.23\n\t\t\n\t\t\n\t\t\n\t\t\tio.konveyor.demo\n\t\t\tconfig-utils\n\t\t\t1.0.0\n\t\t\n\n\t"
          matchingXML: <dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-servlet-api</artifactId><version>${tomcat.version}</version><scope>provided</scope></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-core</artifactId></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-jpa</artifactId></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-jdbc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-webmvc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-web</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-actuator</artifactId><version>2.5.0</version></dependency><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-jdbc</artifactId><version>${tomcat.version}</version><scope>runtime</scope></dependency><dependency><groupId>org.hibernate</groupId><artifactId>hibernate-entitymanager</artifactId><version>${hibernate.version}</version></dependency><dependency><groupId>org.hibernate.validator</groupId><artifactId>hibernate-validator</artifactId><version>${hibernate-validator.version}</version></dependency><dependency><groupId>ch.qos.logback</groupId><artifactId>logback-classic</artifactId><version>1.1.7</version></dependency><dependency><groupId>com.oracle.database.jdbc</groupId><artifactId>ojdbc8</artifactId><version>21.1.0.0</version></dependency><dependency><groupId>org.postgresql</groupId><artifactId>postgresql</artifactId><version>42.2.23</version></dependency><!-- Corporate libraries --><dependency><groupId>io.konveyor.demo</groupId><artifactId>config-utils</artifactId><version>1.0.0</version></dependency>
      links:
      - url: https://camel.apache.org/manual/latest/camel-3-migration-guide.html#_java_versions
        title: 'Camel 3 - Migration Guide: Java Versions'
      effort: 1
    xml-java-versions-00002:
      description: |-
        'jaxb-core' Maven dependency missing
        `jaxb-core` Maven dependency missing.. Apache Camel 3 supports Java 11 and in this Java version JAXB modules have been removed from the JDK, therefore you will need to add them as Maven dependencies since there are couple of components rely on them:. ```Xml. <dependency>. <groupId>com.sun.xml.bind</groupId>. <artifactId>jaxb-core</artifactId>. <version>2.3.0.1</version>. </dependency>. ```
      category: potential
      labels:
      - konveyor.io/source=camel2
      - konveyor.io/source=camel
      - konveyor.io/target=camel3+
      - konveyor.io/target=camel
      incidents:
      - uri: file:///opt/input/source/pom.xml
        message: '`jaxb-core` Maven dependency missing.. Apache Camel 3 supports Java 11 and in this Java version JAXB modules have been removed from the JDK, therefore you will need to add them as Maven dependencies since there are couple of components rely on them:. ```Xml. <dependency>. <groupId>com.sun.xml.bind</groupId>. <artifactId>jaxb-core</artifactId>. <version>2.3.0.1</version>. </dependency>. ```'
        variables:
          data: dependencies
          innerText: "\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-servlet-api\n\t\t\t${tomcat.version}\n\t\t\tprovided\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-core\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-databind\n\t\t\n\t\t\n\t\t\torg.springframework.data\n\t\t\tspring-data-jpa\n\t\t\n\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-jdbc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-webmvc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-web\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework.boot\n\t\t\tspring-boot-starter-actuator\n\t\t\t2.5.0\n\t\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-jdbc\n\t\t\t${tomcat.version}\n\t\t\truntime\n\t\t\n\t\t\n\t\t\torg.hibernate\n\t\t\thibernate-entitymanager\n\t\t\t${hibernate.version}\n\t\t\n\t\t\n\t\t\torg.hibernate.validator\n\t\t\thibernate-validator\n\t\t\t${hibernate-validator.version}\n\t\t\n\t\t\n\t\t\tch.qos.logback\n\t\t\tlogback-classic\n\t\t\t1.1.7\n\t\t\n\t\t\n\t\t\tcom.oracle.database.jdbc\n\t\t\tojdbc8\n\t\t\t21.1.0.0\n\t\t\n\t\t\n\t\t\torg.postgresql\n\t\t\tpostgresql\n\t\t\t42.2.23\n\t\t\n\t\t\n\t\t\n\t\t\tio.konveyor.demo\n\t\t\tconfig-utils\n\t\t\t1.0.0\n\t\t\n\n\t"
          matchingXML: <dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-servlet-api</artifactId><version>${tomcat.version}</version><scope>provided</scope></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-core</artifactId></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-jpa</artifactId></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-jdbc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-webmvc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-web</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-actuator</artifactId><version>2.5.0</version></dependency><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-jdbc</artifactId><version>${tomcat.version}</version><scope>runtime</scope></dependency><dependency><groupId>org.hibernate</groupId><artifactId>hibernate-entitymanager</artifactId><version>${hibernate.version}</version></dependency><dependency><groupId>org.hibernate.validator</groupId><artifactId>hibernate-validator</artifactId><version>${hibernate-validator.version}</version></dependency><dependency><groupId>ch.qos.logback</groupId><artifactId>logback-classic</artifactId><version>1.1.7</version></dependency><dependency><groupId>com.oracle.database.jdbc</groupId><artifactId>ojdbc8</artifactId><version>21.1.0.0</version></dependency><dependency><groupId>org.postgresql</groupId><artifactId>postgresql</artifactId><version>42.2.23</version></dependency><!-- Corporate libraries --><dependency><groupId>io.konveyor.demo</groupId><artifactId>config-utils</artifactId><version>1.0.0</version></dependency>
      links:
      - url: https://camel.apache.org/manual/latest/camel-3-migration-guide.html#_java_versions
        title: 'Camel 3 - Migration Guide: Java Versions'
      effort: 1
    xml-java-versions-00003:
      description: |-
        'jaxb-impl' Maven dependency missing
        `jaxb-impl` Maven dependency missing.. Apache Camel 3 supports Java 11 and in this Java version JAXB modules have been removed from the JDK, therefore you will need to add them as Maven dependencies since there are couple of components rely on them:. ```Xml. <dependency>. <groupId>com.sun.xml.bind</groupId>. <artifactId>jaxb-impl</artifactId>. <version>2.3.2</version>. </dependency>. ```
      category: potential
      labels:
      - konveyor.io/source=camel2
      - konveyor.io/source=camel
      - konveyor.io/target=camel3+
      - konveyor.io/target=camel
      incidents:
      - uri: file:///opt/input/source/pom.xml
        message: '`jaxb-impl` Maven dependency missing.. Apache Camel 3 supports Java 11 and in this Java version JAXB modules have been removed from the JDK, therefore you will need to add them as Maven dependencies since there are couple of components rely on them:. ```Xml. <dependency>. <groupId>com.sun.xml.bind</groupId>. <artifactId>jaxb-impl</artifactId>. <version>2.3.2</version>. </dependency>. ```'
        variables:
          data: dependencies
          innerText: "\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-servlet-api\n\t\t\t${tomcat.version}\n\t\t\tprovided\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-core\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-databind\n\t\t\n\t\t\n\t\t\torg.springframework.data\n\t\t\tspring-data-jpa\n\t\t\n\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-jdbc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-webmvc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-web\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework.boot\n\t\t\tspring-boot-starter-actuator\n\t\t\t2.5.0\n\t\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-jdbc\n\t\t\t${tomcat.version}\n\t\t\truntime\n\t\t\n\t\t\n\t\t\torg.hibernate\n\t\t\thibernate-entitymanager\n\t\t\t${hibernate.version}\n\t\t\n\t\t\n\t\t\torg.hibernate.validator\n\t\t\thibernate-validator\n\t\t\t${hibernate-validator.version}\n\t\t\n\t\t\n\t\t\tch.qos.logback\n\t\t\tlogback-classic\n\t\t\t1.1.7\n\t\t\n\t\t\n\t\t\tcom.oracle.database.jdbc\n\t\t\tojdbc8\n\t\t\t21.1.0.0\n\t\t\n\t\t\n\t\t\torg.postgresql\n\t\t\tpostgresql\n\t\t\t42.2.23\n\t\t\n\t\t\n\t\t\n\t\t\tio.konveyor.demo\n\t\t\tconfig-utils\n\t\t\t1.0.0\n\t\t\n\n\t"
          matchingXML: <dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-servlet-api</artifactId><version>${tomcat.version}</version><scope>provided</scope></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-core</artifactId></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-jpa</artifactId></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-jdbc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-webmvc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-web</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-actuator</artifactId><version>2.5.0</version></dependency><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-jdbc</artifactId><version>${tomcat.version}</version><scope>runtime</scope></dependency><dependency><groupId>org.hibernate</groupId><artifactId>hibernate-entitymanager</artifactId><version>${hibernate.version}</version></dependency><dependency><groupId>org.hibernate.validator</groupId><artifactId>hibernate-validator</artifactId><version>${hibernate-validator.version}</version></dependency><dependency><groupId>ch.qos.logback</groupId><artifactId>logback-classic</artifactId><version>1.1.7</version></dependency><dependency><groupId>com.oracle.database.jdbc</groupId><artifactId>ojdbc8</artifactId><version>21.1.0.0</version></dependency><dependency><groupId>org.postgresql</groupId><artifactId>postgresql</artifactId><version>42.2.23</version></dependency><!-- Corporate libraries --><dependency><groupId>io.konveyor.demo</groupId><artifactId>config-utils</artifactId><version>1.0.0</version></dependency>
      links:
      - url: https://camel.apache.org/manual/latest/camel-3-migration-guide.html#_java_versions
        title: 'Camel 3 - Migration Guide: Java Versions'
      effort: 1
  unmatched:
  - java-dsl-changes-00001
  - java-generic-information-00000
  - java-generic-information-00001
  - component-changes-00019
  - java-generic-information-00004
  - java-generic-information-00010
  - java-generic-information-00005
  - java-generic-information-00006
  - java-generic-information-00008
  - java-generic-information-00009
  - java-generic-information-00002
  - java-generic-information-00011
  - java-generic-information-00012
  - java-generic-information-00013
  - java-generic-information-00014
  - java-generic-information-00015
  - java-generic-information-00016
  - java-generic-information-00017
  - java-generic-information-00018
  - java-generic-information-00019
  - java-generic-information-00021
  - java-generic-information-00022
  - java-generic-information-00023
  - java-generic-information-00024
  - java-generic-information-00025
  - java-generic-information-00026
  - java-generic-information-00033
  - java-generic-information-00027
  - java-generic-information-00028
  - java-generic-information-00029
  - java-generic-information-00030
  - java-generic-information-00031
  - java-generic-information-00032
  - java-generic-information-00045
  - java-generic-information-00047
  - java-generic-information-00049
  - java-generic-information-00050
  - xml-dsl-changes-00001
  - xml-dsl-changes-00002
  - xml-dsl-changes-00003
  - xml-dsl-changes-00004
  - xml-dsl-changes-00005
  - xml-dsl-changes-00006
  - xml-dsl-changes-00007
  - xml-dsl-changes-00008
  - xml-dsl-changes-00009
  - java-generic-information-00052
  - java-generic-information-00046
  - java-multiple-camelcontexts-per-application-not-supported-00000
  - xml-moved-components-00015
  - xml-removed-components-00000
  - xml-removed-components-00001
  - java-generic-information-00048
  - xml-removed-components-00003
  - java-multiple-camelcontexts-per-application-not-supported-00001
  - xml-removed-components-00004
  - xml-removed-components-00002
  - xml-removed-components-00005
  - xml-removed-components-00006
  - java-generic-information-00051
  - xml-removed-components-00007-01
  - xml-removed-components-00008-01
  - xml-removed-components-00005-01
  - xml-removed-components-00007
  - xml-renamed-components-00000
  - xml-renamed-components-00002
  - xml-renamed-components-00001
  - xml-removed-components-00008
  - xml-renamed-components-00004
  - xml-renamed-components-00005
  - xml-moved-components-00014
  - xml-moved-components-00013
  - xml-renamed-components-00006
  - xml-renamed-components-00003
  - xml-renamed-components-00009
  - xml-renamed-components-00007
  - xml-renamed-components-00008
  - xml-renamed-components-00015
  - xml-renamed-components-00014
  - xml-moved-components-00012
  - xml-renamed-components-00011
  - xml-renamed-components-00012
  - xml-renamed-components-00010
  - xml-renamed-components-00013
  - xml-renamed-components-00016
  - xml-renamed-components-00017
  - xml-renamed-components-000019
  - xml-renamed-components-00018
  - xml-renamed-components-00025
  - xml-renamed-components-000024
  - xml-renamed-components-000027
  - xml-renamed-components-000029
  - xml-renamed-components-00022
  - xml-renamed-components-00026
  - xml-renamed-components-000020
  - xml-renamed-components-000023
  - xml-renamed-components-00021
  - xml-renamed-components-000028
- name: discovery-rules
  tags:
  - Properties
  - Java Source
  - Maven XML
  - EJB XML
  violations:
    hardcoded-ip-address:
      description: |-
        Hardcoded IP Address
        When migrating environments, hard-coded IP addresses may need to be modified or eliminated.
      category: mandatory
      labels:
      - konveyor.io/target=cloud-readiness
      - discovery
      - konveyor.io/source
      - konveyor.io/target
      incidents:
      - uri: file:///opt/input/source/src/main/resources/persistence.properties
        message: When migrating environments, hard-coded IP addresses may need to be modified or eliminated.
        codeSnip: |2
            1  jdbc.driverClassName=oracle.jdbc.driver.OracleDriver
            2  jdbc.url=jdbc:oracle:thin:@169.60.225.216:1521/XEPDB1
            3  jdbc.user=customers
            4  jdbc.password=customers
            5  hibernate.hbm2ddl.auto=create-drop
            6  hibernate.dialect=org.hibernate.dialect.OracleDialect
        lineNumber: 2
        variables:
          matchingText: 169.60.225.216
      - uri: file:///opt/input/source/target/classes/persistence.properties
        message: When migrating environments, hard-coded IP addresses may need to be modified or eliminated.
        codeSnip: |2
            1  jdbc.driverClassName=oracle.jdbc.driver.OracleDriver
            2  jdbc.url=jdbc:oracle:thin:@169.60.225.216:1521/XEPDB1
            3  jdbc.user=customers
            4  jdbc.password=customers
            5  hibernate.hbm2ddl.auto=create-drop
            6  hibernate.dialect=org.hibernate.dialect.OracleDialect
        lineNumber: 2
        variables:
          matchingText: 169.60.225.216
      effort: 1
  unmatched:
  - discover-license
  - discover-manifest-file
  - windup-discover-spring-configuration
  - windup-discover-jpa-configuration
  - windup-discover-web-configuration
  - discover-license
  - discover-manifest-file
  - windup-discover-spring-configuration
  - windup-discover-jpa-configuration
  - windup-discover-web-configuration
  - windup-discover-jpa-configuration
- name: droolsjbpm
  description: This ruleset provides help for migrating to a unified KIE (Knowledge Is Everything) API in the upgrade from version 5 to 6.
  unmatched:
  - kie-api-01000
  - kie-api-01001
  - kie-api-01002
  - kie-api-01003
  - kie-api-01004
  - kie-api-01005
  - kie-api-01006
  - kie-api-01007
  - kie-api-01008
  - kie-api-01009
  - kie-api-01012
  - kie-api-01010
  - kie-api-01011
  - kie-api-01013
  - kie-api-01014
  - kie-api-01015
  - kie-api-01016
- name: eap6/resin
  description: This ruleset provides analysis of Resin proprietary xml files that may require individual attention when migrating to JBoss EAP 6+.
  violations:
    generic-catchall-00700:
      description: |
        JBoss API reference
      category: potential
      labels:
      - konveyor.io/source=java
      - konveyor.io/source=javaee
      - konveyor.io/source=soa
      - konveyor.io/target=eap6+
      - konveyor.io/target=eap
      - catchall
      - jboss
      incidents:
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/controller/CustomerController.java
        message: '`org.jboss..logging.Logger;` reference found. No specific details available.'
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.controller;\n  2  \n  3  import org.jboss.logging.Logger;\n  4  import io.konveyor.demo.ordermanagement.exception.ResourceNotFoundException;\n  5  import io.konveyor.demo.ordermanagement.model.Customer;\n  6  import io.konveyor.demo.ordermanagement.service.CustomerService;\n  7  import org.springframework.beans.factory.annotation.Autowired;\n  8  import org.springframework.data.domain.Page;\n  9  import org.springframework.data.domain.Pageable;\n 10  import org.springframework.http.MediaType;\n 11  import org.springframework.web.bind.annotation.GetMapping;\n 12  import org.springframework.web.bind.annotation.PathVariable;\n 13  import org.springframework.web.bind.annotation.RequestMapping;\n 14  import org.springframework.web.bind.annotation.RestController;\n 15  \n 16  @RestController\n 17  @RequestMapping(\"/customers\")\n 18  public class CustomerController {\n 19  \t\n 20  \t@Autowired\n 21  \tprivate CustomerService customerService;\n 22  \t\n 23  \tprivate static Logger logger = Logger.getLogger( CustomerController.class.getName() );\n 24  \t\n 25  \t@GetMapping(value = \"/{id}\", produces = MediaType.APPLICATION_JSON_VALUE)\n 26      public Customer getById(@PathVariable(\"id\") Long id) {\n 27  \t\tCustomer c = customerService.findById(id);\n 28  \t\tif (c == null) {\n 29  \t\t\tthrow new ResourceNotFoundException(\"Requested order doesn't exist\");\n 30  \t\t}\n 31  \t\tlogger.debug(\"Returning element: \" + c);\n 32  \t\treturn c;\n 33  \t}\n 34  \t\n 35  \t@RequestMapping\n 36  \tpublic Page<Customer> findAll(Pageable pageable){\n 37  \t\treturn customerService.findAll(pageable);\n 38  \t}\n 39  \n 40  }\n"
        lineNumber: 3
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/controller/CustomerController.java
          kind: Module
          name: org.jboss.logging.Logger
          packageRemainder: logging.
          subpackage: jboss.
          type: Logger;
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/exception/handler/ExceptionHandlingController.java
        message: '`org.jboss..logging.Logger;` reference found. No specific details available.'
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.exception.handler;\n  2  \n  3  \n  4  import org.jboss.logging.Logger;\n  5  import io.konveyor.demo.ordermanagement.exception.ResourceNotFoundException;\n  6  import org.springframework.http.HttpStatus;\n  7  import org.springframework.web.bind.annotation.ControllerAdvice;\n  8  import org.springframework.web.bind.annotation.ExceptionHandler;\n  9  import org.springframework.web.bind.annotation.ResponseStatus;\n 10  \n 11  @ControllerAdvice\n 12  public class ExceptionHandlingController {\n 13  \t\n 14  \tprivate static Logger logger = Logger.getLogger( ExceptionHandlingController.class.getName() );\n 15  \t\n 16  \t@ResponseStatus(value = HttpStatus.NOT_FOUND,\n 17  \t\t\t\t\treason = \"Resource not found\")\n 18  \t@ExceptionHandler(ResourceNotFoundException.class)\n 19  \tpublic void resourceNotFound(ResourceNotFoundException e) {\n 20  \t\tlogger.warn(\"Resource not found: \" + e.getMessage());\n 21  \t}\n 22  \n 23  }\n"
        lineNumber: 4
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/exception/handler/ExceptionHandlingController.java
          kind: Module
          name: org.jboss.logging.Logger
          packageRemainder: logging.
          subpackage: jboss.
          type: Logger;
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/service/CustomerService.java
        message: '`org.jboss..logging.Logger;` reference found. No specific details available.'
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.service;\n  2  \n  3  \n  4  import org.jboss.logging.Logger;\n  5  import io.konveyor.demo.ordermanagement.model.Customer;\n  6  import io.konveyor.demo.ordermanagement.repository.CustomerRepository;\n  7  import org.springframework.beans.factory.annotation.Autowired;\n  8  import org.springframework.data.domain.Page;\n  9  import org.springframework.data.domain.Pageable;\n 10  import org.springframework.stereotype.Service;\n 11  import org.springframework.transaction.annotation.Transactional;\n 12  \n 13  @Service\n 14  @Transactional\n 15  public class CustomerService implements ICustomerService{\n 16  \t\n 17  \t@Autowired\n 18  \tprivate CustomerRepository repository;\n 19  \t\n 20  \tprivate static Logger logger = Logger.getLogger( CustomerService.class.getName() );\n 21  \t\n 22  \tpublic Customer findById(Long id) {\n 23  \t\tlogger.debug(\"Entering CustomerService.findById()\");\n 24  \t\tCustomer c = repository.findById(id).orElse(null);\n 25  \t\tlogger.debug(\"Returning element: \" + c);\n 26  \t\treturn c;\n 27  \t}\n 28  \t\n 29  \tpublic Page<Customer>findAll(Pageable pageable) {\n 30  \t\tlogger.debug(\"Entering CustomerService.findAll()\");\n 31  \t\tPage<Customer> p = repository.findAll(pageable);\n 32  \t\tlogger.debug(\"Returning element: \" + p);\n 33  \t\treturn p;\n 34  \t}\n 35  \n 36  }\n"
        lineNumber: 4
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/service/CustomerService.java
          kind: Module
          name: org.jboss.logging.Logger
          packageRemainder: logging.
          subpackage: jboss.
          type: Logger;
      effort: 0
  unmatched:
  - commonj-01000
  - commonj-04000
  - xml-glassfish-02000
  - xml-glassfish-03000
  - java-ee-jaxrpc-00000
  - seam-java-00000
  - seam-java-00170
  - seam-ui-jsf-00001
  - seam-ui-jsf-00002
  - xml-webservices-01000
  - xml-webservices-02000
  - xml-webservices-03000
  - xml-webservices-04000
  - xml-webservices-05000
  - xml-webservices-07000
  - xml-webservices-08000
  - xml-webservices-09000
  - xml-webservices-10000
  - jboss-eap5-java-01000
  - jboss-eap5-xml-01000
  - jboss-eap5-xml-03000
  - jboss-eap5-xml-05000
  - jboss-eap5-xml-06000
  - jboss-eap5-xml-07000
  - jboss-eap5-xml-08000
  - jboss-eap5-xml-09000
  - jboss-eap5-7-xml-10000
  - jboss-eap5-xml-11000
  - jboss-eap5-xml-12000
  - jboss-eap5-xml-13000
  - jboss-eap5-xml-16000
  - jboss-eap5-xml-17000
  - jboss-eap5-xml-18000
  - jboss-eap5-xml-20000
  - jrun-catchall-00000
  - jrun-catchall-00001
  - xml-jrun-01000
  - xml-jrun-02000
  - log4j-02000
  - xml-orion-01000
  - xml-orion-02000
  - xml-orion-03000
  - xml-resin-01000
  - environment-dependent-calls-03500
  - weblogic-jms-00000
  - weblogic-xml-descriptor-01000
  - weblogic-xml-descriptor-02000
  - weblogic-xml-descriptor-07000
  - weblogic-xml-descriptor-08000
  - weblogic-xml-descriptor-09000
  - weblogic-xml-descriptor-11000
  - weblogic-xml-descriptor-12000
  - weblogic-xml-descriptor-14000
  - weblogic-xml-descriptor-15000
  - weblogic-xml-descriptor-16000
  - weblogic-xml-descriptor-17000
  - weblogic-xml-descriptor-18000
  - weblogic-01000
  - websphere-jms-00000
  - websphere-mq-00000
  - websphere-mq-01000
  - websphere-mq-02000
  - websphere-mqe-00000
  - websphere-xml-01000
  - websphere-xml-02000
  - websphere-xml-07000
  - websphere-xml-08000
  - websphere-xml-09000
  - commonj-02000
  - commonj-03000
  - commonj-05000
  - commonj-06000
  - seam-java-00010
  - seam-java-00030
  - seam-java-00050
  - seam-java-00060
  - seam-java-00061
  - seam-java-00070
  - seam-java-00040
  - seam-java-00080
  - seam-java-00090
  - seam-java-00091
  - seam-java-00100
  - commonj-07000
  - seam-java-00071
  - seam-java-00120
  - seam-java-00130
  - seam-java-00110
  - seam-java-00140
  - seam-java-00160
  - seam-java-00180
  - seam-java-00190
  - seam-java-00200
  - seam-java-00150
  - seam-java-00210
  - seam-ui-jsf-00001-01
  - seam-java-00230
  - seam-ui-jsf-01001
  - seam-ui-jsf-01000
  - seam-ui-jsf-01002
  - seam-ui-jsf-01003
  - seam-ui-jsf-01005
  - seam-ui-jsf-01004
  - seam-ui-jsf-01006
  - seam-ui-jsf-01007
  - seam-ui-jsf-01008
  - seam-ui-jsf-01009
  - seam-ui-jsf-01010
  - seam-ui-jsf-01012
  - seam-ui-jsf-01011
  - seam-ui-jsf-01013
  - seam-ui-jsf-01014
  - seam-ui-jsf-01015
  - seam-ui-jsf-01016
  - seam-ui-jsf-01017
  - seam-ui-jsf-01018
  - seam-ui-jsf-01020
  - seam-ui-jsf-01019
  - seam-ui-jsf-01021
  - seam-ui-jsf-01023
  - seam-ui-jsf-01022
  - seam-ui-jsf-01025
  - seam-ui-jsf-01024
  - seam-ui-jsf-01027
  - seam-ui-jsf-01028
  - seam-ui-jsf-01026
  - seam-ui-jsf-01029
  - xml-webservices-06000
  - seam-java-00250
  - xml-webservices-06001
  - eap4-eap6-27000
  - eap4-eap6-25000
  - eap4-eap6-28000
  - eap4-eap6-30000
  - eap4-eap6-31000
  - eap4-eap6-32000
  - eap4-eap6-33000
  - eap4-eap6-29000
  - eap4-eap6-35000
  - eap4-eap6-36000
  - eap4-eap6-37000
  - eap4-eap6-38000
  - eap4-eap6-39000
  - eap4-eap6-40000
  - eap4-eap6-34000
  - eap4-eap6-41000
  - eap4-eap6-42000
  - eap4-eap6-26000
  - seam-java-00260
  - seam-java-00270
  - seam-java-00240
  - jboss-eap5-java-04000
  - jboss-eap5-java-05000
  - jboss-eap5-java-06000
  - jboss-eap5-java-07000
  - jboss-eap5-java-08000
  - jboss-eap5-java-08100
  - jboss-eap5-java-08200
  - jboss-eap5-java-02000
  - jboss-eap5-java-08400
  - jboss-eap5-java-08300
  - jboss-eap5-java-08500
  - jboss-eap5-java-08700
  - jboss-eap5-7-xml-10000
  - jboss-eap5-xml-16000
  - seam-java-00220
  - jboss-eap5-xml-14000
  - jboss-eap5-java-08900
  - jboss-eap5-java-08800
  - log4j-01000
  - jsp-01000
  - jboss-eap5-java-09000
  - log4j-03000
  - jboss-eap5-java-09100
  - jboss-eap5-java-08600
  - jotm-00001
  - resteasy-eap5-000001
  - environment-dependent-calls-03000
  - environment-dependent-calls-04001
  - environment-dependent-calls-04000
  - environment-dependent-calls-02000
  - generic-catchall-00000
  - generic-catchall-00001
  - generic-catchall-00002
  - environment-dependent-calls-05000
  - generic-catchall-00003
  - generic-catchall-00100
  - generic-catchall-00200
  - generic-catchall-00300
  - generic-catchall-00400
  - generic-catchall-00500
  - generic-catchall-00600
  - environment-dependent-calls-01000
  - weblogic-catchall-01000
  - weblogic-catchall-03000
  - generic-catchall-00900
  - weblogic-catchall-02000
  - weblogic-catchall-06000
  - weblogic-catchall-06500
  - weblogic-ejb-02000
  - weblogic-ejb-03000
  - weblogic-ejb-04000
  - weblogic-jms-01000
  - weblogic-jms-02000
  - weblogic-jms-03000
  - weblogic-jms-04000
  - weblogic-webapp-01000
  - weblogic-jms-05000
  - weblogic-jms-06000
  - weblogic-jms-07000
  - weblogic-jms-08000
  - weblogic-services-01000
  - weblogic-services-02000
  - weblogic-services-03000
  - weblogic-webapp-02000
  - weblogic-webapp-03000
  - weblogic-webapp-04000
  - weblogic-webapp-07000
  - weblogic-webapp-08000
  - weblogic-webapp-09000
  - weblogic-webservices-01000
  - weblogic-webservices-02000
  - weblogic-xml-descriptor-03000
  - weblogic-xml-descriptor-04000
  - weblogic-xml-descriptor-06001
  - weblogic-xml-descriptor-10000
  - weblogic-xml-descriptor-19000
  - weblogic-webservices-03000
  - weblogic-webapp-06000
  - weblogic-webservices-04000
  - weblogic-webservices-05000
  - weblogic-webservices-07000
  - weblogic-01000
  - weblogic-02000
  - weblogic-webapp-05000
  - weblogic-03000
  - weblogic-04000
  - weblogic-webservices-06000
  - weblogic-12000
  - weblogic-13000
  - weblogic-15000
  - weblogic-016000
  - weblogic-017000
  - weblogic-07000
  - weblogic-08000
  - weblogic-09000
  - weblogic-10000
  - websphere-catchall-db2-00000
  - websphere-catchall-00000
  - websphere-catchall-00001
  - websphere-jms-02000
  - websphere-mq-01000
  - weblogic-11000
  - websphere-mq-02000
  - websphere-jms-02500
  - websphere-jms-03000
  - websphere-jms-04000
  - websphere-mqe-02000
  - websphere-mqe-01000
  - websphere-xml-02000
  - websphere-xml-03500
  - websphere-xml-06000
  - websphere-mqe-03000
  - weblogic-05000
  - weblogic-06000
  - websphere-mqe-04000
  - websphere-other-01000
  - websphere-other-02000
  - websphere-jms-01000
  - weblogic-ejb-01000
- name: eap7/websphere
  description: Provides analysis of WebSphere proprietary classes and constructs that may require individual attention when migrating to JBoss EAP 7+.
  violations:
    hibernate4-00039:
      description: |-
        Hibernate 5  - Oracle12cDialect maps byte[] and Byte[] to BLOB
        Previous versions of Hibernate have mapped `byte[]` and `Byte[]` to Oracle’s `LONG RAW` data type (via the JDBC `LONGVARBINARY` type). Oracle have deprecated the `LONG RAW` data type for many releases - possibly as far back as 8i.. Therefore it was decided to start having Hibernate map `byte[]` and `Byte[]` to `BLOB` for Oracle.. However, in the interest of backwards compatibility and not breaking existing applications it was also decided to limit this change to just the `Oracle12cDialect`. So starting in 5.1 applications using `Oracle12cDialect` and implicitly mapping `byte[]` and `Byte[]` values will start seeing those handled as `BLOB` data rather than `LONG RAW` data.. For existing applications that want to continue to use `Oracle12cDialect` and still continue to implicitly map `byte[]` and `Byte[]` attributes to `LONG RAW`, there is a new configuration setting you can use to enable that: `hibernate.dialect.oracle.prefer_longvarbinary`, which is `false `by default (map to `BLOB`).
      category: mandatory
      labels:
      - konveyor.io/source=hibernate4
      - konveyor.io/source=hibernate
      - konveyor.io/source=eap6
      - konveyor.io/source=eap
      - konveyor.io/target=hibernate5+
      - konveyor.io/target=hibernate
      - konveyor.io/target=eap7
      - konveyor.io/target=eap
      - hibernate
      - configuration
      - Hibernate
      incidents:
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: 'Previous versions of Hibernate have mapped `byte[]` and `Byte[]` to Oracle’s `LONG RAW` data type (via the JDBC `LONGVARBINARY` type). Oracle have deprecated the `LONG RAW` data type for many releases - possibly as far back as 8i.. Therefore it was decided to start having Hibernate map `byte[]` and `Byte[]` to `BLOB` for Oracle.. However, in the interest of backwards compatibility and not breaking existing applications it was also decided to limit this change to just the `Oracle12cDialect`. So starting in 5.1 applications using `Oracle12cDialect` and implicitly mapping `byte[]` and `Byte[]` values will start seeing those handled as `BLOB` data rather than `LONG RAW` data.. For existing applications that want to continue to use `Oracle12cDialect` and still continue to implicitly map `byte[]` and `Byte[]` attributes to `LONG RAW`, there is a new configuration setting you can use to enable that: `hibernate.dialect.oracle.prefer_longvarbinary`, which is `false `by default (map to `BLOB`).'
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 11
        variables:
          extension: ""
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Class
          name: Entity
      effort: 1
    hsearch-00116:
      description: |-
        Hibernate Search 5 - Changes in indexing numeric and date values
        Numbers and dates are now indexed as numeric fields by default. Properties of type int, long, float, double, and their. corresponding wrapper classes are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric. encoding. The id fields are an exception to this rule. Even when they are represented by a numeric type, they are still indexed as. a string keyword by default. The use of `@NumericField` is now obsolete unless you want to specify a custom precision for the numeric. encoding. You can keep the old string-based index format by explicitly specifying a string encoding field bridge. In the case of. integers, this is the `org.hibernate.search.bridge.builtin.IntegerBridge`. Check the `org.hibernate.search.bridge.builtin` package for. other publicly available field bridges.. Date and Calendar are no longer indexed as strings. Instead, instances are encoded as long values representing the number. of milliseconds since January 1, 1970, 00:00:00 GMT. You can switch the indexing format by using the new EncodingType enum. For example:. ```java. @DateBridge(encoding=EncodingType.STRING). @CalendarBridge(encoding=EncodingType.STRING). ```. The encoding change for numbers and dates is important and can have a big impact on application behavior. If you have. a query that targets a field that was previously string-encoded, but is now encoded numerically, you must update the query. Numeric. fields must be searched with a NumericRangeQuery. You must also make sure that all fields targeted by faceting are string encoded.. If you use the Search query DSL, the correct query should be created automatically for you.
      category: optional
      labels:
      - konveyor.io/source=hibernate-search4
      - konveyor.io/source=hibernate-search
      - konveyor.io/source=eap6
      - konveyor.io/source=eap
      - konveyor.io/target=hibernate-search5+
      - konveyor.io/target=hibernate-search
      - konveyor.io/target=eap7
      - konveyor.io/target=eap
      - hibernate-search
      - hibernate
      incidents:
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/controller/CustomerController.java
        message: Numbers and dates are now indexed as numeric fields by default. Properties of type int, long, float, double, and their. corresponding wrapper classes are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric. encoding. The id fields are an exception to this rule. Even when they are represented by a numeric type, they are still indexed as. a string keyword by default. The use of `@NumericField` is now obsolete unless you want to specify a custom precision for the numeric. encoding. You can keep the old string-based index format by explicitly specifying a string encoding field bridge. In the case of. integers, this is the `org.hibernate.search.bridge.builtin.IntegerBridge`. Check the `org.hibernate.search.bridge.builtin` package for. other publicly available field bridges.. Date and Calendar are no longer indexed as strings. Instead, instances are encoded as long values representing the number. of milliseconds since January 1, 1970, 00:00:00 GMT. You can switch the indexing format by using the new EncodingType enum. For example:. ```java. @DateBridge(encoding=EncodingType.STRING). @CalendarBridge(encoding=EncodingType.STRING). ```. The encoding change for numbers and dates is important and can have a big impact on application behavior. If you have. a query that targets a field that was previously string-encoded, but is now encoded numerically, you must update the query. Numeric. fields must be searched with a NumericRangeQuery. You must also make sure that all fields targeted by faceting are string encoded.. If you use the Search query DSL, the correct query should be created automatically for you.
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.controller;\n  2  \n  3  import org.jboss.logging.Logger;\n  4  import io.konveyor.demo.ordermanagement.exception.ResourceNotFoundException;\n  5  import io.konveyor.demo.ordermanagement.model.Customer;\n  6  import io.konveyor.demo.ordermanagement.service.CustomerService;\n  7  import org.springframework.beans.factory.annotation.Autowired;\n  8  import org.springframework.data.domain.Page;\n  9  import org.springframework.data.domain.Pageable;\n 10  import org.springframework.http.MediaType;\n 11  import org.springframework.web.bind.annotation.GetMapping;\n 12  import org.springframework.web.bind.annotation.PathVariable;\n 13  import org.springframework.web.bind.annotation.RequestMapping;\n 14  import org.springframework.web.bind.annotation.RestController;\n 15  \n 16  @RestController\n 17  @RequestMapping(\"/customers\")\n 18  public class CustomerController {\n 19  \t\n 20  \t@Autowired\n 21  \tprivate CustomerService customerService;\n 22  \t\n 23  \tprivate static Logger logger = Logger.getLogger( CustomerController.class.getName() );\n 24  \t\n 25  \t@GetMapping(value = \"/{id}\", produces = MediaType.APPLICATION_JSON_VALUE)\n 26      public Customer getById(@PathVariable(\"id\") Long id) {\n 27  \t\tCustomer c = customerService.findById(id);\n 28  \t\tif (c == null) {\n 29  \t\t\tthrow new ResourceNotFoundException(\"Requested order doesn't exist\");\n 30  \t\t}\n 31  \t\tlogger.debug(\"Returning element: \" + c);\n 32  \t\treturn c;\n 33  \t}\n 34  \t\n 35  \t@RequestMapping\n 36  \tpublic Page<Customer> findAll(Pageable pageable){\n 37  \t\treturn customerService.findAll(pageable);\n 38  \t}\n 39  \n 40  }\n"
        lineNumber: 26
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/controller/CustomerController.java
          kind: Method
          name: getById
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: Numbers and dates are now indexed as numeric fields by default. Properties of type int, long, float, double, and their. corresponding wrapper classes are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric. encoding. The id fields are an exception to this rule. Even when they are represented by a numeric type, they are still indexed as. a string keyword by default. The use of `@NumericField` is now obsolete unless you want to specify a custom precision for the numeric. encoding. You can keep the old string-based index format by explicitly specifying a string encoding field bridge. In the case of. integers, this is the `org.hibernate.search.bridge.builtin.IntegerBridge`. Check the `org.hibernate.search.bridge.builtin` package for. other publicly available field bridges.. Date and Calendar are no longer indexed as strings. Instead, instances are encoded as long values representing the number. of milliseconds since January 1, 1970, 00:00:00 GMT. You can switch the indexing format by using the new EncodingType enum. For example:. ```java. @DateBridge(encoding=EncodingType.STRING). @CalendarBridge(encoding=EncodingType.STRING). ```. The encoding change for numbers and dates is important and can have a big impact on application behavior. If you have. a query that targets a field that was previously string-encoded, but is now encoded numerically, you must update the query. Numeric. fields must be searched with a NumericRangeQuery. You must also make sure that all fields targeted by faceting are string encoded.. If you use the Search query DSL, the correct query should be created automatically for you.
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 21
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Field
          name: id
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: Numbers and dates are now indexed as numeric fields by default. Properties of type int, long, float, double, and their. corresponding wrapper classes are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric. encoding. The id fields are an exception to this rule. Even when they are represented by a numeric type, they are still indexed as. a string keyword by default. The use of `@NumericField` is now obsolete unless you want to specify a custom precision for the numeric. encoding. You can keep the old string-based index format by explicitly specifying a string encoding field bridge. In the case of. integers, this is the `org.hibernate.search.bridge.builtin.IntegerBridge`. Check the `org.hibernate.search.bridge.builtin` package for. other publicly available field bridges.. Date and Calendar are no longer indexed as strings. Instead, instances are encoded as long values representing the number. of milliseconds since January 1, 1970, 00:00:00 GMT. You can switch the indexing format by using the new EncodingType enum. For example:. ```java. @DateBridge(encoding=EncodingType.STRING). @CalendarBridge(encoding=EncodingType.STRING). ```. The encoding change for numbers and dates is important and can have a big impact on application behavior. If you have. a query that targets a field that was previously string-encoded, but is now encoded numerically, you must update the query. Numeric. fields must be searched with a NumericRangeQuery. You must also make sure that all fields targeted by faceting are string encoded.. If you use the Search query DSL, the correct query should be created automatically for you.
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 44
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Method
          name: getId
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: Numbers and dates are now indexed as numeric fields by default. Properties of type int, long, float, double, and their. corresponding wrapper classes are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric. encoding. The id fields are an exception to this rule. Even when they are represented by a numeric type, they are still indexed as. a string keyword by default. The use of `@NumericField` is now obsolete unless you want to specify a custom precision for the numeric. encoding. You can keep the old string-based index format by explicitly specifying a string encoding field bridge. In the case of. integers, this is the `org.hibernate.search.bridge.builtin.IntegerBridge`. Check the `org.hibernate.search.bridge.builtin` package for. other publicly available field bridges.. Date and Calendar are no longer indexed as strings. Instead, instances are encoded as long values representing the number. of milliseconds since January 1, 1970, 00:00:00 GMT. You can switch the indexing format by using the new EncodingType enum. For example:. ```java. @DateBridge(encoding=EncodingType.STRING). @CalendarBridge(encoding=EncodingType.STRING). ```. The encoding change for numbers and dates is important and can have a big impact on application behavior. If you have. a query that targets a field that was previously string-encoded, but is now encoded numerically, you must update the query. Numeric. fields must be searched with a NumericRangeQuery. You must also make sure that all fields targeted by faceting are string encoded.. If you use the Search query DSL, the correct query should be created automatically for you.
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 47
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Method
          name: setId
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/repository/CustomerRepository.java
        message: Numbers and dates are now indexed as numeric fields by default. Properties of type int, long, float, double, and their. corresponding wrapper classes are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric. encoding. The id fields are an exception to this rule. Even when they are represented by a numeric type, they are still indexed as. a string keyword by default. The use of `@NumericField` is now obsolete unless you want to specify a custom precision for the numeric. encoding. You can keep the old string-based index format by explicitly specifying a string encoding field bridge. In the case of. integers, this is the `org.hibernate.search.bridge.builtin.IntegerBridge`. Check the `org.hibernate.search.bridge.builtin` package for. other publicly available field bridges.. Date and Calendar are no longer indexed as strings. Instead, instances are encoded as long values representing the number. of milliseconds since January 1, 1970, 00:00:00 GMT. You can switch the indexing format by using the new EncodingType enum. For example:. ```java. @DateBridge(encoding=EncodingType.STRING). @CalendarBridge(encoding=EncodingType.STRING). ```. The encoding change for numbers and dates is important and can have a big impact on application behavior. If you have. a query that targets a field that was previously string-encoded, but is now encoded numerically, you must update the query. Numeric. fields must be searched with a NumericRangeQuery. You must also make sure that all fields targeted by faceting are string encoded.. If you use the Search query DSL, the correct query should be created automatically for you.
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.repository;\n  2  \n  3  import io.konveyor.demo.ordermanagement.model.Customer;\n  4  import org.springframework.data.repository.PagingAndSortingRepository;\n  5  \n  6  public interface CustomerRepository extends PagingAndSortingRepository<Customer, Long> {\n  7  \n  8  }\n"
        lineNumber: 6
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/repository/CustomerRepository.java
          kind: Interface
          name: CustomerRepository
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/service/CustomerService.java
        message: Numbers and dates are now indexed as numeric fields by default. Properties of type int, long, float, double, and their. corresponding wrapper classes are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric. encoding. The id fields are an exception to this rule. Even when they are represented by a numeric type, they are still indexed as. a string keyword by default. The use of `@NumericField` is now obsolete unless you want to specify a custom precision for the numeric. encoding. You can keep the old string-based index format by explicitly specifying a string encoding field bridge. In the case of. integers, this is the `org.hibernate.search.bridge.builtin.IntegerBridge`. Check the `org.hibernate.search.bridge.builtin` package for. other publicly available field bridges.. Date and Calendar are no longer indexed as strings. Instead, instances are encoded as long values representing the number. of milliseconds since January 1, 1970, 00:00:00 GMT. You can switch the indexing format by using the new EncodingType enum. For example:. ```java. @DateBridge(encoding=EncodingType.STRING). @CalendarBridge(encoding=EncodingType.STRING). ```. The encoding change for numbers and dates is important and can have a big impact on application behavior. If you have. a query that targets a field that was previously string-encoded, but is now encoded numerically, you must update the query. Numeric. fields must be searched with a NumericRangeQuery. You must also make sure that all fields targeted by faceting are string encoded.. If you use the Search query DSL, the correct query should be created automatically for you.
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.service;\n  2  \n  3  \n  4  import org.jboss.logging.Logger;\n  5  import io.konveyor.demo.ordermanagement.model.Customer;\n  6  import io.konveyor.demo.ordermanagement.repository.CustomerRepository;\n  7  import org.springframework.beans.factory.annotation.Autowired;\n  8  import org.springframework.data.domain.Page;\n  9  import org.springframework.data.domain.Pageable;\n 10  import org.springframework.stereotype.Service;\n 11  import org.springframework.transaction.annotation.Transactional;\n 12  \n 13  @Service\n 14  @Transactional\n 15  public class CustomerService implements ICustomerService{\n 16  \t\n 17  \t@Autowired\n 18  \tprivate CustomerRepository repository;\n 19  \t\n 20  \tprivate static Logger logger = Logger.getLogger( CustomerService.class.getName() );\n 21  \t\n 22  \tpublic Customer findById(Long id) {\n 23  \t\tlogger.debug(\"Entering CustomerService.findById()\");\n 24  \t\tCustomer c = repository.findById(id).orElse(null);\n 25  \t\tlogger.debug(\"Returning element: \" + c);\n 26  \t\treturn c;\n 27  \t}\n 28  \t\n 29  \tpublic Page<Customer>findAll(Pageable pageable) {\n 30  \t\tlogger.debug(\"Entering CustomerService.findAll()\");\n 31  \t\tPage<Customer> p = repository.findAll(pageable);\n 32  \t\tlogger.debug(\"Returning element: \" + p);\n 33  \t\treturn p;\n 34  \t}\n 35  \n 36  }\n"
        lineNumber: 22
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/service/CustomerService.java
          kind: Method
          name: findById
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/service/ICustomerService.java
        message: Numbers and dates are now indexed as numeric fields by default. Properties of type int, long, float, double, and their. corresponding wrapper classes are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric. encoding. The id fields are an exception to this rule. Even when they are represented by a numeric type, they are still indexed as. a string keyword by default. The use of `@NumericField` is now obsolete unless you want to specify a custom precision for the numeric. encoding. You can keep the old string-based index format by explicitly specifying a string encoding field bridge. In the case of. integers, this is the `org.hibernate.search.bridge.builtin.IntegerBridge`. Check the `org.hibernate.search.bridge.builtin` package for. other publicly available field bridges.. Date and Calendar are no longer indexed as strings. Instead, instances are encoded as long values representing the number. of milliseconds since January 1, 1970, 00:00:00 GMT. You can switch the indexing format by using the new EncodingType enum. For example:. ```java. @DateBridge(encoding=EncodingType.STRING). @CalendarBridge(encoding=EncodingType.STRING). ```. The encoding change for numbers and dates is important and can have a big impact on application behavior. If you have. a query that targets a field that was previously string-encoded, but is now encoded numerically, you must update the query. Numeric. fields must be searched with a NumericRangeQuery. You must also make sure that all fields targeted by faceting are string encoded.. If you use the Search query DSL, the correct query should be created automatically for you.
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.service;\n  2  \n  3  import io.konveyor.demo.ordermanagement.model.Customer;\n  4  import org.springframework.data.domain.Page;\n  5  import org.springframework.data.domain.Pageable;\n  6  \n  7  public interface ICustomerService {\n  8      public Customer findById(Long id); \n  9  \t\n 10  \tpublic Page<Customer>findAll(Pageable pageable);\n 11      \n 12  }\n"
        lineNumber: 8
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/service/ICustomerService.java
          kind: Method
          name: findById
      links:
      - url: https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.0/html-single/migration_guide/#migrate_hibernate_search_number_and_date_index_formatting_changes
        title: Number and Date Index Formatting Changes in Hibernate Search 5.x
      - url: http://hibernate.org/search/documentation/migrate/5.0/#number-and-date-index-format
        title: Number and date index format
      - url: http://docs.jboss.org/hibernate/search/5.5/api/org/hibernate/search/bridge/builtin/package-summary.html
        title: Javadoc API for org.hibernate.search.bridge.builtin package
      - url: http://docs.jboss.org/hibernate/search/5.5/api/org/hibernate/search/bridge/builtin/IntegerBridge.html
        title: Javadoc API for IntegerBridge
      effort: 1
    hsearch-00119:
      description: |-
        Hibernate Search 5 - Changes in indexing numeric values
        Numbers and dates now indexed as numeric fields by default.. Properties of type `Date`, `Calendar` as well as `int`, `long`, `float`, `double` and their corresponding wrappers, are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric encoding.. The `id` fields are an exception to this rule: even when these are represented by a numeric type, they will still be indexed as a string keyword by default..
      category: optional
      labels:
      - konveyor.io/source=hibernate-search4
      - konveyor.io/source=hibernate-search
      - konveyor.io/source=eap6
      - konveyor.io/source=eap
      - konveyor.io/target=hibernate-search5+
      - konveyor.io/target=hibernate-search
      - konveyor.io/target=eap7
      - konveyor.io/target=eap
      - hibernate-search
      - hibernate
      incidents:
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/controller/CustomerController.java
        message: 'Numbers and dates now indexed as numeric fields by default.. Properties of type `Date`, `Calendar` as well as `int`, `long`, `float`, `double` and their corresponding wrappers, are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric encoding.. The `id` fields are an exception to this rule: even when these are represented by a numeric type, they will still be indexed as a string keyword by default..'
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.controller;\n  2  \n  3  import org.jboss.logging.Logger;\n  4  import io.konveyor.demo.ordermanagement.exception.ResourceNotFoundException;\n  5  import io.konveyor.demo.ordermanagement.model.Customer;\n  6  import io.konveyor.demo.ordermanagement.service.CustomerService;\n  7  import org.springframework.beans.factory.annotation.Autowired;\n  8  import org.springframework.data.domain.Page;\n  9  import org.springframework.data.domain.Pageable;\n 10  import org.springframework.http.MediaType;\n 11  import org.springframework.web.bind.annotation.GetMapping;\n 12  import org.springframework.web.bind.annotation.PathVariable;\n 13  import org.springframework.web.bind.annotation.RequestMapping;\n 14  import org.springframework.web.bind.annotation.RestController;\n 15  \n 16  @RestController\n 17  @RequestMapping(\"/customers\")\n 18  public class CustomerController {\n 19  \t\n 20  \t@Autowired\n 21  \tprivate CustomerService customerService;\n 22  \t\n 23  \tprivate static Logger logger = Logger.getLogger( CustomerController.class.getName() );\n 24  \t\n 25  \t@GetMapping(value = \"/{id}\", produces = MediaType.APPLICATION_JSON_VALUE)\n 26      public Customer getById(@PathVariable(\"id\") Long id) {\n 27  \t\tCustomer c = customerService.findById(id);\n 28  \t\tif (c == null) {\n 29  \t\t\tthrow new ResourceNotFoundException(\"Requested order doesn't exist\");\n 30  \t\t}\n 31  \t\tlogger.debug(\"Returning element: \" + c);\n 32  \t\treturn c;\n 33  \t}\n 34  \t\n 35  \t@RequestMapping\n 36  \tpublic Page<Customer> findAll(Pageable pageable){\n 37  \t\treturn customerService.findAll(pageable);\n 38  \t}\n 39  \n 40  }\n"
        lineNumber: 26
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/controller/CustomerController.java
          kind: Method
          name: getById
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: 'Numbers and dates now indexed as numeric fields by default.. Properties of type `Date`, `Calendar` as well as `int`, `long`, `float`, `double` and their corresponding wrappers, are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric encoding.. The `id` fields are an exception to this rule: even when these are represented by a numeric type, they will still be indexed as a string keyword by default..'
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 21
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Field
          name: id
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: 'Numbers and dates now indexed as numeric fields by default.. Properties of type `Date`, `Calendar` as well as `int`, `long`, `float`, `double` and their corresponding wrappers, are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric encoding.. The `id` fields are an exception to this rule: even when these are represented by a numeric type, they will still be indexed as a string keyword by default..'
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 44
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Method
          name: getId
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: 'Numbers and dates now indexed as numeric fields by default.. Properties of type `Date`, `Calendar` as well as `int`, `long`, `float`, `double` and their corresponding wrappers, are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric encoding.. The `id` fields are an exception to this rule: even when these are represented by a numeric type, they will still be indexed as a string keyword by default..'
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 47
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Method
          name: setId
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/repository/CustomerRepository.java
        message: 'Numbers and dates now indexed as numeric fields by default.. Properties of type `Date`, `Calendar` as well as `int`, `long`, `float`, `double` and their corresponding wrappers, are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric encoding.. The `id` fields are an exception to this rule: even when these are represented by a numeric type, they will still be indexed as a string keyword by default..'
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.repository;\n  2  \n  3  import io.konveyor.demo.ordermanagement.model.Customer;\n  4  import org.springframework.data.repository.PagingAndSortingRepository;\n  5  \n  6  public interface CustomerRepository extends PagingAndSortingRepository<Customer, Long> {\n  7  \n  8  }\n"
        lineNumber: 6
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/repository/CustomerRepository.java
          kind: Interface
          name: CustomerRepository
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/service/CustomerService.java
        message: 'Numbers and dates now indexed as numeric fields by default.. Properties of type `Date`, `Calendar` as well as `int`, `long`, `float`, `double` and their corresponding wrappers, are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric encoding.. The `id` fields are an exception to this rule: even when these are represented by a numeric type, they will still be indexed as a string keyword by default..'
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.service;\n  2  \n  3  \n  4  import org.jboss.logging.Logger;\n  5  import io.konveyor.demo.ordermanagement.model.Customer;\n  6  import io.konveyor.demo.ordermanagement.repository.CustomerRepository;\n  7  import org.springframework.beans.factory.annotation.Autowired;\n  8  import org.springframework.data.domain.Page;\n  9  import org.springframework.data.domain.Pageable;\n 10  import org.springframework.stereotype.Service;\n 11  import org.springframework.transaction.annotation.Transactional;\n 12  \n 13  @Service\n 14  @Transactional\n 15  public class CustomerService implements ICustomerService{\n 16  \t\n 17  \t@Autowired\n 18  \tprivate CustomerRepository repository;\n 19  \t\n 20  \tprivate static Logger logger = Logger.getLogger( CustomerService.class.getName() );\n 21  \t\n 22  \tpublic Customer findById(Long id) {\n 23  \t\tlogger.debug(\"Entering CustomerService.findById()\");\n 24  \t\tCustomer c = repository.findById(id).orElse(null);\n 25  \t\tlogger.debug(\"Returning element: \" + c);\n 26  \t\treturn c;\n 27  \t}\n 28  \t\n 29  \tpublic Page<Customer>findAll(Pageable pageable) {\n 30  \t\tlogger.debug(\"Entering CustomerService.findAll()\");\n 31  \t\tPage<Customer> p = repository.findAll(pageable);\n 32  \t\tlogger.debug(\"Returning element: \" + p);\n 33  \t\treturn p;\n 34  \t}\n 35  \n 36  }\n"
        lineNumber: 22
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/service/CustomerService.java
          kind: Method
          name: findById
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/service/ICustomerService.java
        message: 'Numbers and dates now indexed as numeric fields by default.. Properties of type `Date`, `Calendar` as well as `int`, `long`, `float`, `double` and their corresponding wrappers, are no longer indexed as strings. Instead, they are now indexed using Lucene’s appropriate numeric encoding.. The `id` fields are an exception to this rule: even when these are represented by a numeric type, they will still be indexed as a string keyword by default..'
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.service;\n  2  \n  3  import io.konveyor.demo.ordermanagement.model.Customer;\n  4  import org.springframework.data.domain.Page;\n  5  import org.springframework.data.domain.Pageable;\n  6  \n  7  public interface ICustomerService {\n  8      public Customer findById(Long id); \n  9  \t\n 10  \tpublic Page<Customer>findAll(Pageable pageable);\n 11      \n 12  }\n"
        lineNumber: 8
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/service/ICustomerService.java
          kind: Method
          name: findById
      links:
      - url: https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.0/html-single/migration_guide/#migrate_miscellaneous_hibernate_search_changes
        title: Miscellaneous Changes in Hibernate Search 5.x
      - url: http://hibernate.org/search/documentation/migrate/5.5/#number-and-date-index-format
        title: Numeric and Date index format
      effort: 1
  unmatched:
  - websphere-jms-eap7-00000
  - websphere-mq-eap7-00000
  - websphere-mq-eap7-01000
  - websphere-mq-eap7-02000
  - websphere-mqe-eap7-00000
  - eap7-websphere-xml-01000
  - eap7-websphere-xml-02000
  - eap7-websphere-xml-07000
  - eap7-websphere-xml-08000
  - eap7-websphere-xml-09000
  - jboss-eap5-7-xml-01000
  - jboss-eap5-7-xml-10000
  - jboss-eap5-7-xml-13000
  - jboss-eap5-7-xml-16000
  - jboss-eap5and6to7-java-01000
  - jboss-eap5and6to7-java-02000
  - jboss-eap5and6to7-java-04000
  - jboss-eap5and6to7-java-08000
  - jboss-eap5and6to7-xml-05000
  - jboss-eap5and6to7-xml-06000
  - jboss-eap5and6to7-xml-07000
  - jboss-eap5and6to7-xml-09000
  - jboss-eap5and6to7-xml-12000
  - jboss-eap5and6to7-xml-17000
  - jboss-eap5and6to7-xml-18000
  - jboss-eap5and6to7-xml-34000
  - eap6-xml-05000
  - eap6-xml-06000
  - hsearch-00000
  - embedded-framework-libraries-01000
  - embedded-framework-libraries-02000
  - embedded-framework-libraries-04000
  - embedded-framework-libraries-05000
  - embedded-framework-libraries-06000
  - weblogic-jms-eap7-00000
  - weblogic-xml-descriptor-eap7-01000
  - weblogic-xml-descriptor-eap7-02000
  - weblogic-xml-descriptor-eap7-07000
  - weblogic-xml-descriptor-eap7-08000
  - weblogic-xml-descriptor-eap7-09000
  - weblogic-xml-descriptor-eap7-11000
  - weblogic-xml-descriptor-eap7-12000
  - weblogic-xml-descriptor-eap7-14000
  - weblogic-xml-descriptor-eap7-15000
  - weblogic-xml-descriptor-eap7-16000
  - weblogic-xml-descriptor-eap7-17000
  - weblogic-xml-descriptor-eap7-18000
  - weblogic-eap7-01000
  - websphere-mq-eap7-01000
  - websphere-mq-eap7-02000
  - websphere-jms-eap7-02000
  - websphere-jms-eap7-02500
  - websphere-jms-eap7-03000
  - websphere-jms-eap7-04000
  - eap7-websphere-xml-02000
  - eap7-websphere-xml-03500
  - websphere-mqe-eap7-01000
  - eap7-websphere-xml-06000
  - websphere-mqe-eap7-02000
  - websphere-mqe-eap7-03000
  - jboss-eap4and5to6and7-xml-01000
  - jboss-eap4and5to6and7-xml-02000
  - jboss-eap4and5to6and7-xml-03000
  - jboss-eap4and5to6and7-xml-04000
  - jboss-eap4and5to6and7-xml-05000
  - jboss-eap4and5to6and7-xml-06000
  - jboss-eap4and5to6and7-xml-07000
  - websphere-mqe-eap7-04000
  - websphere-other-eap7-01000
  - websphere-other-eap7-02000
  - jboss-eap4and5to6and7-java-01000
  - jboss-eap4and5to6and7-java-02000
  - jboss-eap4and5to6and7-java-03000
  - base64-01000
  - jaxrpc-00000
  - jboss-eap5-7-java-03000
  - jboss-eap5-7-java-07000
  - jboss-eap5-7-java-08000
  - jboss-eap5-7-java-08100
  - jboss-eap5-7-java-02000
  - websphere-jms-eap7-01000
  - jboss-eap5-7-java-08200
  - jboss-eap5-7-java-05000
  - jboss-eap5-7-java-06000
  - jboss-eap5-7-java-08300
  - jboss-eap5-7-xml-10000
  - jboss-eap5-7-xml-16000
  - jboss-eap5-7-java-08400
  - jboss-eap5-7-xml-14000
  - jboss-eap5-7-java-08500
  - jboss-eap5-7-java-08600
  - jboss-eap5-7-java-08700
  - jboss-eap5-7-java-08800
  - jboss-eap5and6to7-xml-37000
  - jboss-eap5and6to7-xml-31000
  - jboss-eap5and6to7-xml-31500
  - jboss-eap5and6to7-xml-32000
  - jboss-eap5and6to7-xml-33000
  - jboss-eap5and6to7-xml-38000
  - jboss-eap5and6to7-xml-38001
  - jboss-eap5and6to7-xml-38002
  - jboss-eap5and6to7-xml-38003
  - jboss-eap5and6to7-xml-38004
  - jboss-eap5and6to7-xml-38005
  - jboss-eap5and6to7-xml-38006
  - jboss-eap5and6to7-xml-38007
  - jboss-eap5and6to7-xml-39000
  - jboss-eap5and6to7-xml-40000
  - jboss-eap5-7-java-08900
  - jboss-eap5-7-java-09000
  - eap6-08000
  - eap6-08001
  - eap6-08002
  - eap6-12000
  - hibernate4-xml-00001
  - eap6-11000
  - jboss-eap5-7-java-09100
  - hibernate4-xml-00003
  - hibernate4-xml-00002
  - hibernate4-xml-00005
  - hibernate4-xml-00004
  - jboss-eap5and6to7-java-05000
  - jboss-eap5and6to7-java-06000
  - resteasy-eap5and6to7-000018
  - jboss-eap5and6to7-java-03000
  - hibernate4-00001
  - hibernate4-00003
  - hibernate4-00004
  - hibernate4-00005
  - jboss-eap5and6to7-java-07000
  - hibernate4-00006
  - hibernate4-00007
  - hibernate4-00008
  - hibernate4-00009
  - hibernate4-00010
  - hibernate4-00011
  - hibernate4-00012
  - hibernate4-00013
  - hibernate4-00014
  - hibernate4-00016
  - hibernate4-00017
  - hibernate4-00015
  - hibernate4-00018
  - hibernate4-00021
  - hibernate4-00022
  - hibernate4-00023
  - hibernate4-00024
  - hibernate4-00025
  - hibernate4-00026
  - hibernate4-00027
  - hibernate4-00028
  - hibernate4-00030
  - hibernate4-00031
  - hibernate4-00032
  - hibernate4-00033
  - hibernate4-00037
  - hibernate4-00036
  - hibernate4-00035
  - hibernate4-00040
  - hsearch-00001
  - hsearch-00002
  - hsearch-00004
  - hsearch-00003
  - hsearch-00005
  - hsearch-00006
  - hsearch-00007
  - hsearch-00008
  - hsearch-00009
  - hsearch-00010
  - hibernate4-00034
  - hsearch-00011
  - hsearch-00100
  - hsearch-00101
  - hsearch-00103
  - hsearch-00104
  - hsearch-00106
  - hsearch-00107
  - hsearch-00108
  - hsearch-00109
  - hsearch-00111
  - hsearch-00112
  - hsearch-00113
  - hsearch-00114
  - hsearch-00110
  - hsearch-00115
  - hsearch-00201
  - hsearch-00200
  - hsearch-00210
  - hsearch-00211
  - hsearch-00117
  - hibernate4-00038
  - hsearch-00213
  - hsearch-00214
  - hsearch-00215
  - hsearch-00118
  - hsearch-00216
  - hsearch-00217
  - hsearch-00218
  - hsearch-00219
  - hsearch-00221
  - hsearch-00222
  - hsearch-00220
  - hsearch-00224
  - hsearch-00225
  - hsearch-00226
  - hsearch-00227
  - hsearch-00228
  - hsearch-00229
  - hsearch-00230
  - hsearch-00231
  - hsearch-00232
  - hsearch-00233
  - hsearch-00234
  - hsearch-00235
  - hsearch-00236
  - hsearch-00237
  - hsearch-00238
  - hsearch-00239
  - hsearch-00240
  - jboss-eap5and6to7-java-09000
  - resteasy-eap6-000001
  - resteasy-eap6-000002
  - resteasy-eap6-000003
  - resteasy-eap6-000004
  - resteasy-eap6-000005
  - resteasy-eap6-000006
  - resteasy-eap6-000007
  - resteasy-eap6-000008
  - resteasy-eap6-000009
  - resteasy-eap6-000010
  - resteasy-eap6-000011
  - resteasy-eap6-000012
  - resteasy-eap6-000013
  - resteasy-eap6-000014
  - resteasy-eap6-000015
  - resteasy-eap6-000017
  - resteasy-eap6-000019
  - resteasy-eap6-000020
  - resteasy-eap6-000021
  - resteasy-eap6-000022
  - resteasy-eap6-000023
  - resteasy-eap6-000025
  - resteasy-eap6-000029
  - resteasy-eap6-000030
  - resteasy-eap6-000032
  - resteasy-eap6-000101
  - resteasy-eap6-000103
  - resteasy-eap6-000104
  - resteasy-eap6-000105
  - resteasy-eap6-000106
  - resteasy-eap6-000107
  - resteasy-eap6-000118
  - resteasy-eap6-000119
  - resteasy-eap6-000120
  - resteasy-eap6-000121
  - resteasy-eap6-000122
  - resteasy-eap6-000123
  - resteasy-eap6-000125
  - resteasy-eap6-000126
  - resteasy-eap6-000127
  - resteasy-eap6-000128
  - resteasy-eap6-000131
  - resteasy-eap6-000130
  - resteasy-eap6-000140
  - resteasy-eap6-000129
  - ws-security-00000
  - ws-security-00002
  - jax-ws-00000
  - resteasy-eap6-000142
  - resteasy-eap6-000141
  - hibernate50-51-00000
  - hibernate51-53-00100
  - hibernate51-53-00001
  - hibernate51-53-00300
  - hibernate51-53-00400
  - hibernate51-53-00401
  - hibernate50-51-00100
  - hibernate51-53-00402
  - hibernate51-53-00403
  - hibernate51-53-00404
  - hibernate51-53-00405
  - hibernate51-53-00406
  - hibernate51-53-00407
  - hibernate51-53-00500
  - hibernate51-53-00600
  - hibernate51-53-00700
  - hibernate51-53-01000
  - hibernate51-53-00701
  - hibernate51-53-01001
  - hibernate51-53-00702
  - hibernate51-53-00800
  - resteasy30-36-00001
  - hibernate51-53-01100
  - maven-artemis-jms-client-00001
  - maven-javax-to-jakarta-00001
  - maven-javax-to-jakarta-00002
  - maven-javax-to-jakarta-00003
  - maven-javax-to-jakarta-00004
  - maven-javax-to-jakarta-00005
  - maven-javax-to-jakarta-00006
  - maven-javax-to-jakarta-00007
  - maven-javax-to-jakarta-00008
  - maven-javax-to-jakarta-00010
  - maven-javax-to-jakarta-00011
  - maven-javax-to-jakarta-00012
  - maven-javax-to-jakarta-00013
  - maven-javax-to-jakarta-00014
  - maven-javax-to-jakarta-00015
  - maven-javax-to-jakarta-00016
  - maven-javax-to-jakarta-00017
  - maven-jboss-rmi-api_1.0_spec-00001
  - picketlink25-00000
  - move-to-microprofile-rest-client-1.3-00001
  - deprecated-singletonpolicy-00001
  - microprofile_removed_from_eap-00001
  - microprofile_removed_from_eap-00002
  - microprofile_removed_from_eap-00004
  - microprofile_removed_from_eap-00001-01
  - microprofile_removed_from_eap-00003
  - weblogic-jms-eap7-02000
  - weblogic-jms-eap7-01000
  - hibernate51-53-01200
  - hibernate4-00002
  - weblogic-jms-eap7-03000
  - weblogic-jms-eap7-04000
  - weblogic-jms-eap7-05000
  - weblogic-jms-eap7-06000
  - resteasy-eap6-000024
  - weblogic-jms-eap7-07000
  - weblogic-webapp-eap7-01000
  - weblogic-jms-eap7-08000
  - weblogic-services-eap7-01000
  - weblogic-services-eap7-02000
  - weblogic-services-eap7-03000
  - weblogic-webapp-eap7-02000
  - weblogic-webapp-eap7-03000
  - weblogic-webapp-eap7-04000
  - weblogic-webapp-eap7-07000
  - weblogic-webapp-eap7-08000
  - singleton-sessionbean-00001
  - weblogic-webapp-eap7-09000
  - weblogic-webservices-eap7-01000
  - weblogic-webapp-eap7-06000
  - ws-security-00001
  - weblogic-webservices-eap7-02000
  - weblogic-xml-descriptor-eap7-03000
  - weblogic-xml-descriptor-eap7-04000
  - weblogic-xml-descriptor-eap7-06001
  - weblogic-xml-descriptor-eap7-10000
  - weblogic-xml-descriptor-19000
  - weblogic-webservices-eap7-04000
  - weblogic-webapp-eap7-05000
  - weblogic-webservices-eap7-03000
  - weblogic-webservices-eap7-05000
  - weblogic-eap7-01000
  - weblogic-eap7-02000
  - weblogic-eap7-03000
  - weblogic-webservices-07000
  - weblogic-webservices-eap7-06000
  - weblogic-eap7-04000
  - weblogic-eap7-07000
  - weblogic-eap7-12000
  - weblogic-eap7-13000
  - weblogic-eap7-09000
  - weblogic-eap7-08000
  - weblogic-eap7-15000
  - weblogic-eap7-016000
  - weblogic-eap7-017000
  - weblogic-eap7-10000
  - weblogic-eap7-11000
  - weblogic-eap7-06000
  - weblogic-eap7-05000
- name: eap8/eap7
  description: This ruleset provides rules to support the migration to hibernate search 6.0. Developed under WINDUPRULE-900
  violations:
    hibernate-00005:
      description: |-
        Implicit name determination for sequences and tables associated with identifier generation has changed
        The way in which Hibernate determines implicit names for sequences and tables associated with identifier generation has changed in 6.0 which may affect migrating applications.. As of 6.0, Hibernate by default creates a sequence per entity hierarchy instead of a single sequence hibernate_sequence.. Due to this change, users that previously used `@GeneratedValue(strategy = GenerationStrategy.AUTO)` or simply `@GeneratedValue` (since `AUTO` is the default), need to ensure that the database now contains sequences for every entity, named `<entity name>_seq`. For an entity Person, a sequence person_seq is expected to exist.. It’s best to run hbm2ddl (e.g. by temporarily setting `hbm2ddl.auto=create`) to obtain a list of DDL statements for the sequences.
      category: potential
      labels:
      - konveyor.io/target=hibernate6+
      - konveyor.io/target=hibernate
      - konveyor.io/target=eap8+
      - konveyor.io/target=eap
      - konveyor.io/source
      - hibernate
      incidents:
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: The way in which Hibernate determines implicit names for sequences and tables associated with identifier generation has changed in 6.0 which may affect migrating applications.. As of 6.0, Hibernate by default creates a sequence per entity hierarchy instead of a single sequence hibernate_sequence.. Due to this change, users that previously used `@GeneratedValue(strategy = GenerationStrategy.AUTO)` or simply `@GeneratedValue` (since `AUTO` is the default), need to ensure that the database now contains sequences for every entity, named `<entity name>_seq`. For an entity Person, a sequence person_seq is expected to exist.. It’s best to run hbm2ddl (e.g. by temporarily setting `hbm2ddl.auto=create`) to obtain a list of DDL statements for the sequences.
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 20
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Field
          name: Id
      links:
      - url: https://github.com/hibernate/hibernate-orm/blob/6.0/migration-guide.adoc#implicit-identifier-sequence-and-table-name
        title: Hibernate ORM 6 migration guide - Implicit Identifier Sequence and Table Name
      effort: 3
    javax-to-jakarta-import-00001:
      description: |
        javax.{renamed} has been replaced by jakarta.{renamed}
      category: mandatory
      labels:
      - konveyor.io/target=jakarta-ee9+
      - konveyor.io/target=jakarta-ee
      - konveyor.io/target=eap8
      - konveyor.io/target=eap
      - konveyor.io/source
      incidents:
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/OrderManagementAppInitializer.java
        message: Replace the `javax.servlet` import statement with `jakarta.servlet`
        codeSnip: "  1  package io.konveyor.demo.ordermanagement;\n  2  \n  3  import javax.servlet.ServletContext;\n  4  import javax.servlet.ServletException;\n  5  import javax.servlet.ServletRegistration;\n  6  \n  7  import org.springframework.web.WebApplicationInitializer;\n  8  import org.springframework.web.context.ContextLoaderListener;\n  9  import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\n 10  import org.springframework.web.servlet.DispatcherServlet;\n 11  \n 12  \n 13  public class OrderManagementAppInitializer implements WebApplicationInitializer  {\n 14  \n 15  \t@Override\n 16  \tpublic void onStartup(ServletContext container) throws ServletException {\n 17  \t\tAnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();\n 18        context.setConfigLocation(\"io.konveyor.demo.ordermanagement.config\");\n 19  \n 20        context.scan(\"io.konveyor.demo.ordermanagement\");\n 21        container.addListener(new ContextLoaderListener(context));\n 22  \n 23        ServletRegistration.Dynamic dispatcher = container\n 24          .addServlet(\"dispatcher\", new DispatcherServlet(context));\n 25        \n 26        dispatcher.setLoadOnStartup(1);\n 27        dispatcher.addMapping(\"/\");\n 28  \t\t\n 29  \t}\n 30  \n 31  }\n"
        lineNumber: 4
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/OrderManagementAppInitializer.java
          kind: Module
          name: javax.servlet.ServletException
          renamed: servlet
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/OrderManagementAppInitializer.java
        message: Replace the `javax.servlet` import statement with `jakarta.servlet`
        codeSnip: "  1  package io.konveyor.demo.ordermanagement;\n  2  \n  3  import javax.servlet.ServletContext;\n  4  import javax.servlet.ServletException;\n  5  import javax.servlet.ServletRegistration;\n  6  \n  7  import org.springframework.web.WebApplicationInitializer;\n  8  import org.springframework.web.context.ContextLoaderListener;\n  9  import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\n 10  import org.springframework.web.servlet.DispatcherServlet;\n 11  \n 12  \n 13  public class OrderManagementAppInitializer implements WebApplicationInitializer  {\n 14  \n 15  \t@Override\n 16  \tpublic void onStartup(ServletContext container) throws ServletException {\n 17  \t\tAnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();\n 18        context.setConfigLocation(\"io.konveyor.demo.ordermanagement.config\");\n 19  \n 20        context.scan(\"io.konveyor.demo.ordermanagement\");\n 21        container.addListener(new ContextLoaderListener(context));\n 22  \n 23        ServletRegistration.Dynamic dispatcher = container\n 24          .addServlet(\"dispatcher\", new DispatcherServlet(context));\n 25        \n 26        dispatcher.setLoadOnStartup(1);\n 27        dispatcher.addMapping(\"/\");\n 28  \t\t\n 29  \t}\n 30  \n 31  }\n"
        lineNumber: 5
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/OrderManagementAppInitializer.java
          kind: Module
          name: javax.servlet.ServletRegistration
          renamed: servlet
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/OrderManagementAppInitializer.java
        message: Replace the `javax.servlet` import statement with `jakarta.servlet`
        codeSnip: "  1  package io.konveyor.demo.ordermanagement;\n  2  \n  3  import javax.servlet.ServletContext;\n  4  import javax.servlet.ServletException;\n  5  import javax.servlet.ServletRegistration;\n  6  \n  7  import org.springframework.web.WebApplicationInitializer;\n  8  import org.springframework.web.context.ContextLoaderListener;\n  9  import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\n 10  import org.springframework.web.servlet.DispatcherServlet;\n 11  \n 12  \n 13  public class OrderManagementAppInitializer implements WebApplicationInitializer  {\n 14  \n 15  \t@Override\n 16  \tpublic void onStartup(ServletContext container) throws ServletException {\n 17  \t\tAnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();\n 18        context.setConfigLocation(\"io.konveyor.demo.ordermanagement.config\");\n 19  \n 20        context.scan(\"io.konveyor.demo.ordermanagement\");\n 21        container.addListener(new ContextLoaderListener(context));\n 22  \n 23        ServletRegistration.Dynamic dispatcher = container\n 24          .addServlet(\"dispatcher\", new DispatcherServlet(context));\n 25        \n 26        dispatcher.setLoadOnStartup(1);\n 27        dispatcher.addMapping(\"/\");\n 28  \t\t\n 29  \t}\n 30  \n 31  }\n"
        lineNumber: 3
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/OrderManagementAppInitializer.java
          kind: Module
          name: javax.servlet.ServletContext
          renamed: servlet
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: Replace the `javax.persistence` import statement with `jakarta.persistence`
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 7
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Module
          name: javax.persistence.Id
          renamed: persistence
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: Replace the `javax.persistence` import statement with `jakarta.persistence`
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 3
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Module
          name: javax.persistence.Column
          renamed: persistence
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: Replace the `javax.persistence` import statement with `jakarta.persistence`
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 4
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Module
          name: javax.persistence.Entity
          renamed: persistence
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: Replace the `javax.persistence` import statement with `jakarta.persistence`
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 8
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Module
          name: javax.persistence.SequenceGenerator
          renamed: persistence
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: Replace the `javax.persistence` import statement with `jakarta.persistence`
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 5
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Module
          name: javax.persistence.GeneratedValue
          renamed: persistence
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: Replace the `javax.persistence` import statement with `jakarta.persistence`
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 6
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Module
          name: javax.persistence.GenerationType
          renamed: persistence
      - uri: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
        message: Replace the `javax.persistence` import statement with `jakarta.persistence`
        codeSnip: "  1  package io.konveyor.demo.ordermanagement.model;\n  2  \n  3  import javax.persistence.Column;\n  4  import javax.persistence.Entity;\n  5  import javax.persistence.GeneratedValue;\n  6  import javax.persistence.GenerationType;\n  7  import javax.persistence.Id;\n  8  import javax.persistence.SequenceGenerator;\n  9  import javax.persistence.Table;\n 10  \n 11  @Entity\n 12  @Table(name = \"customers\")\n 13  public class Customer {\n 14  \t@Id\n 15      @SequenceGenerator(\n 16              name = \"customersSequence\",\n 17              sequenceName = \"customers_id_seq\",\n 18              allocationSize = 1,\n 19              initialValue = 6)\n 20      @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"customersSequence\")\n 21  \tprivate Long id;\n 22  \t\n 23  \t@Column(length = 20)\n 24  \tprivate String username;\n 25  \t\n 26  \t@Column(length = 20)\n 27  \tprivate String name;\n 28  \t\n 29  \t@Column(length = 40)\n 30  \tprivate String surname;\n 31  \t\n 32  \t@Column(length = 250)\n 33  \tprivate String address;\n 34  \t\n 35  \t@Column(name = \"zipcode\", length = 10)\n 36  \tprivate String zipCode;\n 37  \t\n 38  \t@Column(length = 40)\n 39  \tprivate String city;\n 40  \t\n 41  \t@Column(length = 40)\n 42  \tprivate String country;\n 43  \t\n 44  \tpublic Long getId() {\n 45  \t\treturn id;\n 46  \t}\n 47  \tpublic void setId(Long id) {\n 48  \t\tthis.id = id;\n 49  \t}\n 50  \tpublic String getUsername() {\n 51  \t\treturn username;\n 52  \t}\n 53  \tpublic void setUsername(String username) {\n 54  \t\tthis.username = username;\n 55  \t}\n 56  \tpublic String getName() {\n 57  \t\treturn name;\n 58  \t}\n 59  \tpublic void setName(String name) {\n 60  \t\tthis.name = name;\n 61  \t}\n 62  \tpublic String getSurname() {\n 63  \t\treturn surname;\n 64  \t}\n 65  \tpublic void setSurname(String surname) {\n 66  \t\tthis.surname = surname;\n 67  \t}\n 68  \tpublic String getAddress() {\n 69  \t\treturn address;\n 70  \t}\n 71  \tpublic void setAddress(String address) {\n 72  \t\tthis.address = address;\n 73  \t}\n 74  \tpublic String getZipCode() {\n 75  \t\treturn zipCode;\n 76  \t}\n 77  \tpublic void setZipCode(String zipCode) {\n 78  \t\tthis.zipCode = zipCode;\n 79  \t}\n 80  \tpublic String getCity() {\n 81  \t\treturn city;\n 82  \t}\n 83  \tpublic void setCity(String city) {\n 84  \t\tthis.city = city;\n 85  \t}\n 86  \tpublic String getCountry() {\n 87  \t\treturn country;\n 88  \t}\n 89  \tpublic void setCountry(String country) {\n 90  \t\tthis.country = country;\n 91  \t}\n 92  \t\n 93  \t@Override\n 94  \tpublic String toString() {\n 95  \t\treturn \"Customer [id=\" + id + \", username=\" + username + \", name=\" + name + \", surname=\" + surname\n 96  \t\t\t\t+ \", address=\" + address + \", zipCode=\" + zipCode + \", city=\" + city + \", country=\" + country + \"]\";\n 97  \t}\n 98  }\n"
        lineNumber: 9
        variables:
          file: file:///opt/input/source/src/main/java/io/konveyor/demo/ordermanagement/model/Customer.java
          kind: Module
          name: javax.persistence.Table
          renamed: persistence
      effort: 1
  unmatched:
  - eap8-faces-00001
  - eap8-faces-00003
  - eap8-faces-00004
  - eap8-faces-00005
  - eap8-faces-00002
  - eap8-faces-00006
  - eap8-resteasy-00002
  - eap8-faces-00007
  - eap8-resteasy-00004
  - eap8-faces-00009
  - eap8-resteasy-00005
  - eap8-resteasy-00001
  - eap8-resteasy-00003
  - eap8-resteasy-00009
  - eap8-resteasy-00006
  - eap8-resteasy-00008
  - eap8-resteasy-00010
  - eap8-faces-00008
  - eap8-xml-binding-00004
  - eap8-xml-binding-00003
  - eap8-resteasy-00011
  - eap8-resteasy-00007
  - eap8-xml-binding-00008
  - eap8-xml-binding-00007
  - eap8-xml-binding-00009
  - eap8-ejb-00003
  - empty-beans-xml-00001
  - eap8-xml-binding-00006
  - eap8-xml-binding-00002
  - eap8-ejb-00001
  - eap8-ejb-00002
  - hibernate-6.2-00010
  - hibernate-search-6.1-00010
  - hibernate-6.2-00030
  - hibernate-6.2-00020
  - eap8-xml-binding-00005
  - hibernate-search-6.1-00020
  - hibernate-search-6.1-00030
  - hibernate-search-6.1-00040
  - hibernate-search-6.1-00050
  - hibernate-search-6.1-00060
  - hibernate-search-6.1-00090
  - hibernate-search-6.1-00080
  - hibernate-search-6.1-00100
  - hibernate-search-6.1-00070
  - hibernate-search-6.1-00120
  - hibernate-search-6.1-00160
  - hibernate-search-6.1-00130
  - hibernate-search-6.1-00150
  - hibernate-search-6.1-00170
  - hibernate-search-6.1-00180
  - hibernate-search-00020
  - hibernate-search-6.1-00190
  - hibernate-search-00030
  - hibernate-search-00040
  - hibernate-search-00050
  - hibernate-search-00060
  - hibernate-search-00070
  - hibernate-search-00080
  - hibernate-search-00090
  - hibernate-search-00100
  - hibernate-search-00105
  - hibernate-search-00110
  - hibernate-search-00120
  - hibernate-search-00140
  - hibernate-search-00150
  - hibernate-search-00160
  - hibernate-search-00180
  - hibernate-search-00170
  - hibernate-search-00190
  - hibernate-search-00200
  - hibernate-search-6.1-00140
  - hibernate-search-00210
  - hibernate-search-00220
  - hibernate-search-00230
  - hibernate-search-00010
  - hibernate-search-00250
  - hibernate-search-00240
  - hibernate-search-00260
  - hibernate-search-00270
  - hibernate-search-00280
  - hibernate-search-00290
  - hibernate-search-00300
  - hibernate-search-00310
  - hibernate-search-00330
  - hibernate-search-00320
  - hibernate-search-00340
  - hibernate-search-00350
  - hibernate-search-00360
  - hibernate-search-00370
  - hibernate-search-00380
  - hibernate-search-00390
  - hibernate-search-00400
  - hibernate-search-00410
  - hibernate-search-00420
  - hibernate-search-00430
  - hibernate-search-00440
  - hibernate-search-00450
  - hibernate-search-00470
  - hibernate-search-00460
  - hibernate-search-00480
  - hibernate-search-00490
  - hibernate-search-00510
  - hibernate-search-00500
  - hibernate-search-00520
  - hibernate-search-00530
  - hibernate-search-00540
  - hibernate-search-00550
  - hibernate-search-00570
  - hibernate-search-00560
  - hibernate-search-00580
  - hibernate-search-00600
  - hibernate-search-00590
  - hibernate-search-00610
  - hibernate-search-00620
  - hibernate-search-00640
  - hibernate-search-00650
  - hibernate-search-00660
  - hibernate-search-00670
  - hibernate-search-00630
  - hibernate-search-00680
  - hibernate-search-00710
  - hibernate-search-00700
  - hibernate-search-00690
  - hibernate-search-00720
  - hibernate-search-00730
  - hibernate-search-00740
  - hibernate-search-00760
  - hibernate-search-00750
  - hibernate-search-00780
  - hibernate-search-00770
  - hibernate-search-00790
  - hibernate-search-00820
  - hibernate-search-00800
  - hibernate-search-00810
  - hibernate-search-00830
  - hibernate-search-00860
  - hibernate-search-00840
  - hibernate-search-00850
  - hibernate-search-00890
  - hibernate-search-00870
  - hibernate-search-00880
  - hibernate-search-00900
  - hibernate-search-00930
  - hibernate-search-00910
  - hibernate-search-00920
  - hibernate-search-00940
  - hibernate-search-00950
  - hibernate-search-00980
  - hibernate-search-00960
  - hibernate-search-00990
  - hibernate-search-00970
  - hibernate-search-01040
  - hibernate-search-01010
  - hibernate-search-01020
  - hibernate-search-01030
  - hibernate6-00030
  - hibernate-search-01000
  - hibernate-00010
  - hibernate6-00020
  - hibernate6-00080
  - hibernate6-00070
  - hibernate6-00100
  - hibernate6-00110
  - hibernate6-00050
  - hibernate6-00120
  - hibernate6-00140
  - hibernate6-00090
  - hibernate6-00160
  - hibernate6-00130
  - hibernate6-00170
  - hibernate6-00180
  - hibernate6-00200
  - hibernate6-00210
  - hibernate6-00190
  - hibernate6-00220
  - hibernate6-00230
  - hibernate6-00240
  - hibernate6-00251
  - hibernate6-00250
  - hibernate6-00252
  - hibernate6-00253
  - hibernate6-00254
  - hibernate6-00255
  - hibernate6-00257
  - hibernate6-00060
  - hibernate6-00270
  - jakarta-cdi-00002
  - jakarta-cdi-00001
  - jakarta-cdi-00004
  - jakarta-cdi-00003
  - jakarta-el-00010
  - jakarta-el-00020
  - jakarta-json-binding-00010
  - jakarta-faces-00001
  - jakarta-soap-00010
  - javaee-to-jakarta-namespaces-00001
  - javaee-to-jakarta-namespaces-00002
  - javaee-to-jakarta-namespaces-00003
  - javaee-to-jakarta-namespaces-00004
  - javaee-to-jakarta-namespaces-00005
  - jakarta-ws-rs-00001
  - javaee-to-jakarta-namespaces-00006
  - javaee-to-jakarta-namespaces-00007
  - javaee-to-jakarta-namespaces-00008
  - javaee-to-jakarta-namespaces-00009
  - javaee-to-jakarta-namespaces-00010
  - javaee-to-jakarta-namespaces-00011
  - javaee-to-jakarta-namespaces-00012
  - javaee-to-jakarta-namespaces-00013
  - javaee-to-jakarta-namespaces-00014
  - javaee-to-jakarta-namespaces-00015
  - javaee-to-jakarta-namespaces-00016
  - javaee-to-jakarta-namespaces-00017
  - javaee-to-jakarta-namespaces-00018
  - javaee-to-jakarta-namespaces-00019
  - javaee-to-jakarta-namespaces-00020
  - javaee-to-jakarta-namespaces-00021
  - javaee-to-jakarta-namespaces-00022
  - javaee-to-jakarta-namespaces-00023
  - javaee-to-jakarta-namespaces-00024
  - javaee-to-jakarta-namespaces-00026
  - javaee-to-jakarta-namespaces-00025
  - javaee-to-jakarta-namespaces-00027
  - javaee-to-jakarta-namespaces-00028
  - javaee-to-jakarta-namespaces-00029
  - javaee-to-jakarta-namespaces-00030
  - javaee-to-jakarta-namespaces-00031
  - javaee-to-jakarta-namespaces-00032
  - javaee-to-jakarta-namespaces-00033
  - javaee-to-jakarta-namespaces-00034
  - javaee-to-jakarta-namespaces-00036
  - javaee-to-jakarta-namespaces-00035
  - javaee-to-jakarta-namespaces-00037
  - javaee-to-jakarta-namespaces-00038
  - javaee-to-jakarta-namespaces-00040
  - javaee-to-jakarta-namespaces-00039
  - javaee-to-jakarta-namespaces-00041
  - javaee-to-jakarta-namespaces-00042
  - javaee-to-jakarta-namespaces-00043
  - javaee-to-jakarta-namespaces-00044
  - javaee-to-jakarta-namespaces-00045
  - javaee-to-jakarta-namespaces-00046
  - javaee-to-jakarta-namespaces-00048
  - javaee-to-jakarta-namespaces-00047
  - eap8-xml-binding-00001
  - javaee-to-jakarta-namespaces-00049
  - javaee-to-jakarta-namespaces-00051
  - javaee-to-jakarta-namespaces-00050
  - javaee-to-jakarta-namespaces-00052
  - javaee-to-jakarta-namespaces-00053
  - javaee-to-jakarta-namespaces-00054
  - javax-to-jakarta-bootstrapping-files-00001
  - javax-to-jakarta-dependencies-00001
  - javax-to-jakarta-dependencies-00002
  - javaee-to-jakarta-namespaces-00055
  - javax-to-jakarta-dependencies-00004
  - javax-to-jakarta-dependencies-00003
  - javaee-to-jakarta-namespaces-00056
  - javax-to-jakarta-dependencies-00005
  - javax-to-jakarta-dependencies-00007
  - javax-to-jakarta-dependencies-00006
  - javax-to-jakarta-dependencies-00008
  - javax-to-jakarta-properties-00001
  - javax-to-jakarta-servlet-00010
  - javax-to-jakarta-servlet-00020
  - javax-to-jakarta-servlet-00030
  - javax-to-jakarta-servlet-00041
  - javax-to-jakarta-servlet-00042
  - javax-to-jakarta-servlet-00043
  - javax-to-jakarta-servlet-00050
  - javax-to-jakarta-servlet-00040
  - javax-to-jakarta-servlet-00060
  - javax-to-jakarta-servlet-00072
  - javax-to-jakarta-servlet-00071
  - javax-to-jakarta-servlet-00080
  - javax-to-jakarta-servlet-00090
  - javax-to-jakarta-servlet-00070
  - jakarta-soap-00020
  - hibernate6-00150
  - javax-to-jakarta-servlet-00102
  - javax-to-jakarta-servlet-00100
  - javax-to-jakarta-servlet-00101
  - hibernate-6.2-00040
  - jboss-dependencies-00001
  - jboss-dependencies-00002
  - jboss-dependencies-00003
  - jboss-dependencies-00004
  - jboss-dependencies-00005
  - jboss-dependencies-00006
  - jboss-dependencies-00007
  - jboss-dependencies-00008
  - jboss-dependencies-00009
  - jboss-dependencies-00010
  - jboss-dependencies-00011
  - jboss-dependencies-00012
  - jboss-dependencies-00013
  - jboss-dependencies-00014
  - jboss-dependencies-00015
  - jboss-dependencies-00016
  - jboss-dependencies-00017
  - jboss-dependencies-00018
  - jboss-dependencies-00019
  - jboss-dependencies-00020
  - jboss-dependencies-00021
  - jboss-dependencies-00022
  - jboss-dependencies-00023
  - jboss-dependencies-00024
  - jboss-dependencies-00025
  - jboss-dependencies-00026
  - jboss-dependencies-00027
  - jboss-dependencies-00028
  - jboss-dependencies-00029
  - jboss-dependencies-00030
  - jboss-dependencies-00031
  - keycloak-openid-00001
  - keycloak-openid-00010
  - legacy-vault-00010
  - hibernate6-00040
  - picketlink-00010
  - picketlink-00020
  - javax-to-jakarta-servlet-00110
  - javax-to-jakarta-servlet-00112
  - javax-to-jakarta-servlet-00111
  - javax-to-jakarta-servlet-00121
  - javax-to-jakarta-servlet-00122
  - javax-to-jakarta-servlet-00123
  - login-modules-00001
  - javax-to-jakarta-servlet-00120
  - hibernate-6.2-00050
- name: eapxp/thorntail
  description: This ruleset provides analysis of Maven built applications that use Thorntail Maven Plugin, which should be replaced by JBoss EAP XP Bootable JAR Maven Plugin, when migrating to JBoss EAP XP.
  unmatched:
  - eapxp_bootable_jar_maven_plugin_configuration_changes-1
  - remove_thorntail_yaml_configuration_files-1
  - replace_thorntail_boms-1
  - replace_thorntail_boms-2
  - replace_thorntail_fractions-01
  - replace_thorntail_fractions-02
  - replace_thorntail_fractions-03
  - replace_thorntail_fractions-04
  - replace_thorntail_fractions-05
  - replace_thorntail_fractions-06
  - replace_thorntail_fractions-07
  - replace_thorntail_fractions-08
  - replace_thorntail_fractions-09
  - replace_thorntail_fractions-10
  - replace_thorntail_fractions-11
  - replace_thorntail_fractions-12
  - replace_thorntail_fractions-13
  - replace_thorntail_fractions-14
  - replace_thorntail_fractions-15
  - replace_thorntail_fractions-16
  - replace_thorntail_fractions-17
  - replace_thorntail_fractions-18
  - replace_thorntail_fractions-19
  - replace_thorntail_fractions-20
  - replace_thorntail_fractions-21
  - replace_thorntail_fractions-22
  - replace_thorntail_fractions-23
  - replace_thorntail_fractions-24
  - replace_thorntail_fractions-25
  - replace_thorntail_fractions-26
  - replace_thorntail_fractions-27
  - replace_thorntail_fractions-28
  - replace_thorntail_fractions-29
  - replace_thorntail_fractions-30
  - replace_thorntail_fractions-31
  - replace_thorntail_fractions-32
  - replace_thorntail_fractions-33
  - replace_thorntail_fractions-34
  - replace_thorntail_fractions-35
  - replace_thorntail_fractions-36
  - replace_thorntail_fractions-37
  - replace_thorntail_fractions-38
  - replace_thorntail_fractions-39
  - replace_thorntail_fractions-40
  - replace_thorntail_fractions-41
  - replace_thorntail_fractions-42
  - replace_thorntail_fractions-43
  - replace_thorntail_fractions-44
  - replace_thorntail_fractions-45
  - replace_thorntail_fractions-46
  - replace_thorntail_fractions-47
  - replace_thorntail_fractions-48
  - replace_thorntail_fractions-49
  - replace_thorntail_fractions-50
  - replace_thorntail_maven_plugin-1
- name: filemappings
  description: This rule set configures the organization matching functionality, using known root-package prefixes to identify libraries and other code.
- name: fuse
  description: This ruleset provides analysis that may require individual attention when migrating from Sonic classes.
  unmatched:
  - sonic-esb-01000
  - xml-sonic-esb-01000
  - sonic-catchall-00000
  - sonic-esb-01000
  - sonic-esb-04000
  - sonic-esb-02000
  - sonic-esb-03000
  - sonic-esb-09000
  - sonic-esb-06000
  - sonic-esb-07000
  - sonic-esb-08000
  - sonic-esb-10000
  - sonic-esb-13000
  - sonic-esb-11000
  - sonic-esb-14000
  - sonic-esb-12000
  - sonic-esb-17000
  - sonic-esb-18000
  - sonic-esb-19000
  - sonic-esb-15000
  - sonic-esb-16000
  - sonic-esb-05000
  - sonic-esb-20000
  - sonic-esb-21000
- name: fuse-service-works/soa-p-5
  description: This ruleset provides analysis of JBoss SOA Platform 5 applications and provides information on how to migrate these to Red Hat JBoss Fuse Service Works
  unmatched:
  - soa-p-5-01000
  - soa-p-5-02000
  - soa-p-5-03000
  - soa-p-5-04000
  - soa-p-5-05000
  - soa-p-5-06000
  - soa-p-5-07000
  - soa-p-5-08000
  - soa-p-5-09000
  - soa-p-5-10000
  - soa-p-5-11000
  - soa-p-5-12000
  - soa-p-5-13000
  - soa-p-5-15000
  - soa-p-5-14000
  - soa-p-16000
  - soa-p-17000
  - soa-p-18000
  - soa-p-20000
  - soa-p-19000
  - soa-p-22000
  - soa-p-21000
  - soa-p-23000
  - soa-p-24000
  - soa-p-25000
  - soa-p-26000
  - soa-p-27000
  - soa-p-29000
  - soa-p-30000
  - soa-p-28000
  - soa-p-31000
  - soa-p-32000
  - soa-p-35000
  - soa-p-33000
  - soa-p-34000
  - soa-p-36000
  - soa-p-37000
  - soa-p-38000
  - soa-p-39000
  - soa-p-40000
  - soa-p-41000
  - soa-p-43000
  - soa-p-42000
  - soa-p-44000
  - soa-p-46000
  - soa-p-47000
  - soa-p-45000
  - soa-p-48000
  - soa-p-49000
  - soa-p-50000
  - soa-p-5-01000
- name: hibernate
  description: This ruleset provides analysis that may require individual attention when migrating to newer Hibernate java constructs.
  tags:
  - catchall
  - Hibernate
  unmatched:
  - hibernate-10100
  - hibernate-xml-02000
  - hibernate-xml-01000
  - hibernate-xml-03000
  - hibernate-10100
  - hibernate-02000
  - hibernate-03000
  - hibernate-04000
  - hibernate-05000
  - hibernate-01000
  - hibernate-08000
  - hibernate-09000
  - hibernate-10000
  - hibernate-06000
  - hibernate-07000
- name: jws5
  description: This ruleset provides analysis of applications that need to change their pom dependencies to upgrade dependencies that belong to the groupId `org.apache.tomcat`
  unmatched:
  - upgrade-tomcat-dependencies-00001
- name: openjdk11/openjdk8
  description: This ruleset provides analysis with respect to API removals between OpenJDK 8 and 11.
  unmatched:
  - java-removals-00030
  - java-removals-00040
  - java-removals-00041
  - java-removals-00050
  - java-removals-00020
  - java-removals-00000
  - java-removals-00060
  - java-removals-00120
  - java-removals-00010
  - removed-javaee-modules-00000
  - java-removals-00110
  - java-removals-00130
  - java-removals-00140
  - removed-javaee-modules-00020
  - java-removals-00100
  - removed-javaee-modules-00010
  - java-removals-00150
- name: openjdk17
  description: This ruleset provides analysis regarding removed APIs in OpenJDK 18 to 21.
  unmatched:
  - deprecation-00000
  - finalization-deprecation-00000
  - deprecation-00030
  - finalization-deprecation-00010
  - removed-apis-00005
  - removed-apis-00000
  - deprecation-00020
  - removed-apis-00015
  - utf-8-by-default-00010
  - deprecation-00010
  - removed-apis-00010
  - deprecation-00005
  - dynamic-agents-00000
  - utf-8-by-default-00030
  - utf-8-by-default-00020
  - utf-8-by-default-00000
- name: openjdk17/openjdk11
  description: This ruleset provides analysis Security Manager classes and methods deprecated between OpenJDK 11 to 17.
  unmatched:
  - lombok-incompatibility-00001
  - removed-classes-00000
  - removed-packages-00000
  - security-manager-deprecation-00010
  - removed-packages-00010
  - applet-api-deprecation-00000
  - security-manager-deprecation-00040
  - security-manager-deprecation-00030
  - security-manager-deprecation-00060
  - security-manager-deprecation-00050
  - security-manager-deprecation-00070
  - security-manager-deprecation-00020
  - security-manager-deprecation-00000
- name: openjdk7/oraclejdk7
  description: This ruleset provides analysis with respect to the migration from OracleJDK to OpenJDK.
  unmatched:
  - oracle2openjdk-00000
  - oracle2openjdk-00002
  - oracle2openjdk-00001
  - oracle2openjdk-00004
  - oracle2openjdk-00003
  - oracle2openjdk-00005
- name: openliberty/websphere
  description: This ruleset identifies usage of WebSphere APIs and technologies which are not provided by Open Liberty.
  unmatched:
  - DetectJavaApplicationDeploymentJava
  - DetectRemoteServicesJava
  - DetectRemoteBundleRepositoriesJava
  - DetectEJBEntityBeansXML
  - DetectWSNotificationJava
  - DetectTransactionPropagationEJBRemote
  - DetectJAXRPC
  - DetectJAXRJava
  - AppProfileRule
  - DetectPolicySetAndWsSecurity
  - DetectWSATXML
  - ActivitySessionRule
  - DetectJavaPortlet
  - DetectWSBAJava
  - DynamicQueryRule
  - MTOMRule
  - StartupBeanRule
  - SOAPOverJMSRule
  - ServerName
  - WebSphereSdoRule
  - WebSphereSchedulerRule
  - BatchFeaturePackRule
  - WebSphereUnavailableAPIsAppClient
  - WebSphereUnavailableAPIsConnectorArchitecture
  - WebSphereUnavailableAPIsEnterpriseJavaBeans
  - WebSphereUnavailableAPIsExtensionRegistry
  - WebSphereUnavailableAPIsISC
  - WebSphereUnavailableAPIsExceptions
  - AsyncBeansSchedulerRule
  - WebSphereUnavailableAPIsORB
  - DynamicCacheRule
  - WebSphereUnavailableAPIsLoggingAndRAS
  - WebSphereUnavailableAPIsPortal
  - WebSphereUnavailableAPIsPMI
  - WebSphereUnavailableAPIsResourceAdapter
  - I18nRule
  - WebSphereServletRule
  - WebSphereUnavailableAPIsSIB
  - WebSphereUnavailableAPIsSMF
  - WebSphereUnavailableAPIsTPV
  - WebSphereUnavailableAPIsExtHelper
  - WebSphereUnavailableAPIsUDDI
  - WebSphereUnavailableAPIsManagement
  - WebSphereUnavailableAPIsWLM
  - WebSphereUnavailableAPIsWSSecurityHelper
  - WebSphereUnavailableSPIsRRD
  - WebSphereUnavailableSSOCookieMethod
  - WebSphereUnavailableSSOTokenMethod
  - WOLARule
  - WorkAreaRule
  - WSNotificationRuleJava
  - XMLFeaturePackRule
  - WOLAMissingClassesRule
  - WebSphereWebServicesRule
  - WebSphereWebServicesGeneratedClassesRule
  - WebSphereUnavailableAPIsSecurity
  - WebSphereUnavailableAPIsWSADIE
- name: openshift
  description: This ruleset detects the Java Mail API, which may be problematic when migrating an application to a cloud environment.
  tags:
  - Java Remote Method Invocation (RMI) service
  - Java Remote Method Invocation (RMI) API
  - rmi
  violations:
    jni-native-code-00000:
      description: |-
        Java native libraries (JNI, JNA)
        Java native libraries might not run in a cloud or container environment.. Recommendations. * Review the purpose of the native library in your application.. * Check whether the native library is compatible with a cloud environment.. * Reuse or embed the native library or application in a cloud environment, for example, in a JBoss module.. * Replace, remove, or rewrite the native library or application using a cloud-compatible equivalent.
      category: mandatory
      labels:
      - konveyor.io/target=cloud-readiness
      - konveyor.io/source
      - jni
      incidents:
      - uri: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
        message: Java native libraries might not run in a cloud or container environment.. Recommendations. * Review the purpose of the native library in your application.. * Check whether the native library is compatible with a cloud environment.. * Reuse or embed the native library or application in a cloud environment, for example, in a JBoss module.. * Replace, remove, or rewrite the native library or application using a cloud-compatible equivalent.
        codeSnip: "  1  package io.konveyor.demo.config;\n  2  \n  3  import java.io.FileInputStream;\n  4  import java.io.InputStream;\n  5  import java.util.Properties;\n  6  \n  7  public class ApplicationConfiguration {\n  8  \n  9  \tprivate Properties config;\n 10  \n 11  \tpublic ApplicationConfiguration() {\n 12  \t\tsuper();\n 13  \t\tthis.config = loadProperties();\n 14  \n 15  \t}\n 16  \n 17  \tprivate Properties loadProperties() {\n 18  \t\tProperties properties = new Properties();\n 19  \n 20  \t\ttry (InputStream inputStream = new FileInputStream(\"/opt/config/persistence.properties\")) {\n 21  \n 22  \t\t\tproperties.load(inputStream);\n 23  \n 24  \t\t} catch (Exception e) {\n 25  \t\t\tSystem.out.println(\"Exception: \" + e);\n 26  \t\t}\n 27  \n 28  \t\treturn properties;\n 29  \t}\n 30  \n 31  \tpublic String getProperty (String name) {\n 32  \t\treturn config.getProperty(name);\n 33  \t}\n 34  \n 35  \n 36  \n 37  }\n"
        lineNumber: 13
        variables:
          file: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
          kind: Constructor
          name: ApplicationConfiguration
      - uri: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
        message: Java native libraries might not run in a cloud or container environment.. Recommendations. * Review the purpose of the native library in your application.. * Check whether the native library is compatible with a cloud environment.. * Reuse or embed the native library or application in a cloud environment, for example, in a JBoss module.. * Replace, remove, or rewrite the native library or application using a cloud-compatible equivalent.
        codeSnip: "  1  package io.konveyor.demo.config;\n  2  \n  3  import java.io.FileInputStream;\n  4  import java.io.InputStream;\n  5  import java.util.Properties;\n  6  \n  7  public class ApplicationConfiguration {\n  8  \n  9  \tprivate Properties config;\n 10  \n 11  \tpublic ApplicationConfiguration() {\n 12  \t\tsuper();\n 13  \t\tthis.config = loadProperties();\n 14  \n 15  \t}\n 16  \n 17  \tprivate Properties loadProperties() {\n 18  \t\tProperties properties = new Properties();\n 19  \n 20  \t\ttry (InputStream inputStream = new FileInputStream(\"/opt/config/persistence.properties\")) {\n 21  \n 22  \t\t\tproperties.load(inputStream);\n 23  \n 24  \t\t} catch (Exception e) {\n 25  \t\t\tSystem.out.println(\"Exception: \" + e);\n 26  \t\t}\n 27  \n 28  \t\treturn properties;\n 29  \t}\n 30  \n 31  \tpublic String getProperty (String name) {\n 32  \t\treturn config.getProperty(name);\n 33  \t}\n 34  \n 35  \n 36  \n 37  }\n"
        lineNumber: 22
        variables:
          file: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
          kind: Method
          name: loadProperties
      links:
      - url: https://access.redhat.com/solutions/229443
        title: How to load native libraries and access them via JNI in EAP (with or without a module)
      - url: https://access.redhat.com/solutions/1444643
        title: Is it supported to compile the JNI code as 32-bit shared libraries and use it in 64-bit compiled Java code ?
      effort: 7
    local-storage-00001:
      description: |-
        File system - Java IO
        An application running inside a container could lose access to a file in local storage.. Recommendations. The following recommendations depend on the function of the file in local storage:. * Logging: Log to standard output and use a centralized log collector to analyze the logs.. * Caching: Use a cache backing service.. * Configuration: Store configuration settings in environment variables so that they can be updated without code changes.. * Data storage: Use a database backing service for relational data or use a persistent data storage system.. * Temporary data storage: Use the file system of a running container as a brief, single-transaction cache.
      category: mandatory
      labels:
      - konveyor.io/target=cloud-readiness
      - konveyor.io/source
      - storage
      incidents:
      - uri: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
        message: 'An application running inside a container could lose access to a file in local storage.. Recommendations. The following recommendations depend on the function of the file in local storage:. * Logging: Log to standard output and use a centralized log collector to analyze the logs.. * Caching: Use a cache backing service.. * Configuration: Store configuration settings in environment variables so that they can be updated without code changes.. * Data storage: Use a database backing service for relational data or use a persistent data storage system.. * Temporary data storage: Use the file system of a running container as a brief, single-transaction cache.'
        codeSnip: "  1  package io.konveyor.demo.config;\n  2  \n  3  import java.io.FileInputStream;\n  4  import java.io.InputStream;\n  5  import java.util.Properties;\n  6  \n  7  public class ApplicationConfiguration {\n  8  \n  9  \tprivate Properties config;\n 10  \n 11  \tpublic ApplicationConfiguration() {\n 12  \t\tsuper();\n 13  \t\tthis.config = loadProperties();\n 14  \n 15  \t}\n 16  \n 17  \tprivate Properties loadProperties() {\n 18  \t\tProperties properties = new Properties();\n 19  \n 20  \t\ttry (InputStream inputStream = new FileInputStream(\"/opt/config/persistence.properties\")) {\n 21  \n 22  \t\t\tproperties.load(inputStream);\n 23  \n 24  \t\t} catch (Exception e) {\n 25  \t\t\tSystem.out.println(\"Exception: \" + e);\n 26  \t\t}\n 27  \n 28  \t\treturn properties;\n 29  \t}\n 30  \n 31  \tpublic String getProperty (String name) {\n 32  \t\treturn config.getProperty(name);\n 33  \t}\n 34  \n 35  \n 36  \n 37  }\n"
        lineNumber: 20
        variables:
          file: file:///root/.m2/repository/io/konveyor/demo/config-utils/1.0.0/io/konveyor/demo/config/ApplicationConfiguration.java
          kind: Constructor
          name: loadProperties
      links:
      - url: https://12factor.net/logs
        title: 'Twelve-Factor App: Logs'
      - url: https://docs.openshift.com/container-platform/4.5/logging/cluster-logging.html
        title: 'OpenShift Container Platform: Understanding cluster logging'
      - url: https://12factor.net/backing-services
        title: 'Twelve-Factor App: Backing services'
      - url: https://12factor.net/config
        title: 'Twelve-Factor App: Config'
      - url: https://docs.openshift.com/container-platform/4.5/builds/creating-build-inputs.html#builds-input-secrets-configmaps_creating-build-inputs
        title: 'OpenShift Container Platform: Input secrets and ConfigMaps'
      - url: https://docs.openshift.com/container-platform/4.5/storage/understanding-persistent-storage.html
        title: 'OpenShift Container Platform: Understanding persistent storage'
      effort: 1
  unmatched:
  - embedded-cache-libraries-01000
  - embedded-cache-libraries-02000
  - embedded-cache-libraries-03000
  - embedded-cache-libraries-04000
  - embedded-cache-libraries-05000
  - embedded-cache-libraries-06000
  - embedded-cache-libraries-07000
  - embedded-cache-libraries-08000
  - embedded-cache-libraries-09000
  - embedded-cache-libraries-10000
  - embedded-cache-libraries-11000
  - embedded-cache-libraries-12000
  - embedded-cache-libraries-13000
  - embedded-cache-libraries-14000
  - embedded-cache-libraries-15000
  - logging-0000
  - logging-0001
  - jca-00000
  - java-rmi-00000
  - local-storage-00003
  - local-storage-00004
  - logging-0001
  - local-storage-00005
  - session-00000
  - java-rpc-00000
  - logging-0000
  - socket-communication-00001
  - mail-00000
  - session-00001
  - local-storage-00002
  - socket-communication-00000
- name: os/windows
  description: This is a ruleset for Windows operating system specific rules while migrating to Linux operating system.
  unmatched:
  - os-specific-00001
  - os-specific-00002
- name: quarkus/springboot
  description: This ruleset gives hints to migrate from Spring Scheduled to Quarkus spring-scheduled extension
  violations:
    javaee-pom-to-quarkus-00000:
      description: |
        The expected project artifact's extension is `jar`
      category: mandatory
      labels:
      - konveyor.io/source=java-ee
      - konveyor.io/target=quarkus
      incidents:
      - uri: file:///opt/input/source/pom.xml
        message: The project artifact's current extension (i.e. `<packaging>` tag value) is `` but the expected value should be `jar`
        variables:
          data: war
          innerText: war
          matchingXML: ""
      links:
      - url: https://quarkus.io/guides/maven-tooling#build-tool-maven
        title: Quarkus - Guide
      effort: 1
    javaee-pom-to-quarkus-00010:
      description: |
        Adopt Quarkus BOM
      category: mandatory
      labels:
      - konveyor.io/source=java-ee
      - konveyor.io/target=quarkus
      incidents:
      - uri: file:///opt/input/source/pom.xml
        message: Use the Quarkus BOM to omit the version of the different Quarkus dependencies.. Add the following sections to the `pom.xml` file:. ```xml. <properties>. <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>. <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>. <quarkus.platform.version>3.1.0.Final</quarkus.platform.version>. </properties>. <dependencyManagement>. <dependencies>. <dependency>. <groupId>$</groupId>. <artifactId>$</artifactId>. <version>$</version>. <type>pom</type>. <scope>import</scope>. </dependency>. </dependencies>. </dependencyManagement>. ```. Check the latest Quarkus version available from the `Quarkus - Releases` link below.
        variables:
          data: project
          innerText: "\n\t4.0.0\n\tio.konveyor.demo\n\tcustomers-tomcat\n\t0.0.1-SNAPSHOT\n\n\tOrder Management\n\twar\n\tRemaining services for the legacy Order Management application\n\n\t\n\t\t1.8\n\t\tUTF-8\n\t\tUTF-8\n\t\t${java.version}\n\t\t${java.version}\n\t\t5.3.7\n\t\t9.0.46\n\t\t2021.0.1\n\t\t5.4.32.Final\n\t\t6.2.0.Final\n\n\t\t42.2.20\n\t\t2.12.3\n\n\t\t3.8.1\n\t\t3.3.1\n\t\t3.2.0\n\n\t\n\n\t\n\t\t\n\t\t\tdemo-config\n\t\t\tAzure DevOps\n\t\t\thttps://pkgs.dev.azure.com/ShawnHurley21/demo-config-utils/_packaging/demo-config/maven/v1\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\n\t\t\t\tcom.fasterxml.jackson\n\t\t\t\tjackson-bom\n\t\t\t\t${jackson.version}\n\t\t\t\timport\n\t\t\t\tpom\n\t\t\t\n\t\t\t\n\t\t\t\torg.springframework.data\n\t\t\t\tspring-data-bom\n\t\t\t\t${spring-data.version}\n\t\t\t\timport\n\t\t\t\tpom\n\t\t\t\n\t\t\n\t\n\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-servlet-api\n\t\t\t${tomcat.version}\n\t\t\tprovided\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-core\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-databind\n\t\t\n\t\t\n\t\t\torg.springframework.data\n\t\t\tspring-data-jpa\n\t\t\n\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-jdbc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-webmvc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-web\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework.boot\n\t\t\tspring-boot-starter-actuator\n\t\t\t2.5.0\n\t\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-jdbc\n\t\t\t${tomcat.version}\n\t\t\truntime\n\t\t\n\t\t\n\t\t\torg.hibernate\n\t\t\thibernate-entitymanager\n\t\t\t${hibernate.version}\n\t\t\n\t\t\n\t\t\torg.hibernate.validator\n\t\t\thibernate-validator\n\t\t\t${hibernate-validator.version}\n\t\t\n\t\t\n\t\t\tch.qos.logback\n\t\t\tlogback-classic\n\t\t\t1.1.7\n\t\t\n\t\t\n\t\t\tcom.oracle.database.jdbc\n\t\t\tojdbc8\n\t\t\t21.1.0.0\n\t\t\n\t\t\n\t\t\torg.postgresql\n\t\t\tpostgresql\n\t\t\t42.2.23\n\t\t\n\t\t\n\t\t\n\t\t\tio.konveyor.demo\n\t\t\tconfig-utils\n\t\t\t1.0.0\n\t\t\n\n\t\n\t\n\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-compiler-plugin\n\t\t\t\t${maven-compiler-plugin.version}\n\t\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-war-plugin\n\t\t\t\t${maven-war-plugin.version}\n\t\t\t\t\n\t\t\t\t\tfalse\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-resources-plugin\n\t\t\t\t${maven-resources-plugin.version}\n\t\t\t\t\n\t\t\t\t\tUTF-8\n\t\t\t\t\n\t\t\t\n\t\t\n\t\n\n"
          matchingXML: <modelVersion>4.0.0</modelVersion><groupId>io.konveyor.demo</groupId><artifactId>customers-tomcat</artifactId><version>0.0.1-SNAPSHOT</version><name>Order Management</name><packaging>war</packaging><description>Remaining services for the legacy Order Management application</description><properties><java.version>1.8</java.version><project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><maven.compiler.source>${java.version}</maven.compiler.source><maven.compiler.target>${java.version}</maven.compiler.target><spring-framework.version>5.3.7</spring-framework.version><tomcat.version>9.0.46</tomcat.version><spring-data.version>2021.0.1</spring-data.version><hibernate.version>5.4.32.Final</hibernate.version><hibernate-validator.version>6.2.0.Final</hibernate-validator.version><postgresql-driver.version>42.2.20</postgresql-driver.version><jackson.version>2.12.3</jackson.version><maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version><maven-war-plugin.version>3.3.1</maven-war-plugin.version><maven-resources-plugin.version>3.2.0</maven-resources-plugin.version></properties><repositories><repository><id>demo-config</id><name>Azure DevOps</name><url>https://pkgs.dev.azure.com/ShawnHurley21/demo-config-utils/_packaging/demo-config/maven/v1</url></repository></repositories><dependencyManagement><dependencies><dependency><groupId>com.fasterxml.jackson</groupId><artifactId>jackson-bom</artifactId><version>${jackson.version}</version><scope>import</scope><type>pom</type></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-bom</artifactId><version>${spring-data.version}</version><scope>import</scope><type>pom</type></dependency></dependencies></dependencyManagement><dependencies><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-servlet-api</artifactId><version>${tomcat.version}</version><scope>provided</scope></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-core</artifactId></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-jpa</artifactId></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-jdbc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-webmvc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-web</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-actuator</artifactId><version>2.5.0</version></dependency><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-jdbc</artifactId><version>${tomcat.version}</version><scope>runtime</scope></dependency><dependency><groupId>org.hibernate</groupId><artifactId>hibernate-entitymanager</artifactId><version>${hibernate.version}</version></dependency><dependency><groupId>org.hibernate.validator</groupId><artifactId>hibernate-validator</artifactId><version>${hibernate-validator.version}</version></dependency><dependency><groupId>ch.qos.logback</groupId><artifactId>logback-classic</artifactId><version>1.1.7</version></dependency><dependency><groupId>com.oracle.database.jdbc</groupId><artifactId>ojdbc8</artifactId><version>21.1.0.0</version></dependency><dependency><groupId>org.postgresql</groupId><artifactId>postgresql</artifactId><version>42.2.23</version></dependency><!-- Corporate libraries --><dependency><groupId>io.konveyor.demo</groupId><artifactId>config-utils</artifactId><version>1.0.0</version></dependency></dependencies><build><plugins><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-compiler-plugin</artifactId><version>${maven-compiler-plugin.version}</version></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-war-plugin</artifactId><version>${maven-war-plugin.version}</version><configuration><failOnMissingWebXml>false</failOnMissingWebXml></configuration></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-resources-plugin</artifactId><version>${maven-resources-plugin.version}</version><configuration><encoding>UTF-8</encoding></configuration></plugin></plugins></build>
      links:
      - url: https://quarkus.io/guides/maven-tooling#build-tool-maven
        title: Quarkus - Guide
      - url: https://quarkus.io/blog/tag/release/
        title: Quarkus - Releases
      effort: 1
    javaee-pom-to-quarkus-00020:
      description: |
        Adopt Quarkus Maven plugin
      category: mandatory
      labels:
      - konveyor.io/source=java-ee
      - konveyor.io/target=quarkus
      incidents:
      - uri: file:///opt/input/source/pom.xml
        message: Use the Quarkus Maven plugin adding the following sections to the `pom.xml` file:. ```xml. <properties>. <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>. <quarkus.platform.version>3.1.0.Final</quarkus.platform.version>. </properties>. <build>. <plugins>. <plugin>. <groupId>$</groupId>. <artifactId>quarkus-maven-plugin</artifactId>. <version>$</version>. <extensions>true</extensions>. <executions>. <execution>. <goals>. <goal>build</goal>. <goal>generate-code</goal>. <goal>generate-code-tests</goal>. </goals>. </execution>. </executions>. </plugin>. </plugins>. </build>. ```
        variables:
          data: project
          innerText: "\n\t4.0.0\n\tio.konveyor.demo\n\tcustomers-tomcat\n\t0.0.1-SNAPSHOT\n\n\tOrder Management\n\twar\n\tRemaining services for the legacy Order Management application\n\n\t\n\t\t1.8\n\t\tUTF-8\n\t\tUTF-8\n\t\t${java.version}\n\t\t${java.version}\n\t\t5.3.7\n\t\t9.0.46\n\t\t2021.0.1\n\t\t5.4.32.Final\n\t\t6.2.0.Final\n\n\t\t42.2.20\n\t\t2.12.3\n\n\t\t3.8.1\n\t\t3.3.1\n\t\t3.2.0\n\n\t\n\n\t\n\t\t\n\t\t\tdemo-config\n\t\t\tAzure DevOps\n\t\t\thttps://pkgs.dev.azure.com/ShawnHurley21/demo-config-utils/_packaging/demo-config/maven/v1\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\n\t\t\t\tcom.fasterxml.jackson\n\t\t\t\tjackson-bom\n\t\t\t\t${jackson.version}\n\t\t\t\timport\n\t\t\t\tpom\n\t\t\t\n\t\t\t\n\t\t\t\torg.springframework.data\n\t\t\t\tspring-data-bom\n\t\t\t\t${spring-data.version}\n\t\t\t\timport\n\t\t\t\tpom\n\t\t\t\n\t\t\n\t\n\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-servlet-api\n\t\t\t${tomcat.version}\n\t\t\tprovided\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-core\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-databind\n\t\t\n\t\t\n\t\t\torg.springframework.data\n\t\t\tspring-data-jpa\n\t\t\n\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-jdbc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-webmvc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-web\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework.boot\n\t\t\tspring-boot-starter-actuator\n\t\t\t2.5.0\n\t\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-jdbc\n\t\t\t${tomcat.version}\n\t\t\truntime\n\t\t\n\t\t\n\t\t\torg.hibernate\n\t\t\thibernate-entitymanager\n\t\t\t${hibernate.version}\n\t\t\n\t\t\n\t\t\torg.hibernate.validator\n\t\t\thibernate-validator\n\t\t\t${hibernate-validator.version}\n\t\t\n\t\t\n\t\t\tch.qos.logback\n\t\t\tlogback-classic\n\t\t\t1.1.7\n\t\t\n\t\t\n\t\t\tcom.oracle.database.jdbc\n\t\t\tojdbc8\n\t\t\t21.1.0.0\n\t\t\n\t\t\n\t\t\torg.postgresql\n\t\t\tpostgresql\n\t\t\t42.2.23\n\t\t\n\t\t\n\t\t\n\t\t\tio.konveyor.demo\n\t\t\tconfig-utils\n\t\t\t1.0.0\n\t\t\n\n\t\n\t\n\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-compiler-plugin\n\t\t\t\t${maven-compiler-plugin.version}\n\t\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-war-plugin\n\t\t\t\t${maven-war-plugin.version}\n\t\t\t\t\n\t\t\t\t\tfalse\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-resources-plugin\n\t\t\t\t${maven-resources-plugin.version}\n\t\t\t\t\n\t\t\t\t\tUTF-8\n\t\t\t\t\n\t\t\t\n\t\t\n\t\n\n"
          matchingXML: <modelVersion>4.0.0</modelVersion><groupId>io.konveyor.demo</groupId><artifactId>customers-tomcat</artifactId><version>0.0.1-SNAPSHOT</version><name>Order Management</name><packaging>war</packaging><description>Remaining services for the legacy Order Management application</description><properties><java.version>1.8</java.version><project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><maven.compiler.source>${java.version}</maven.compiler.source><maven.compiler.target>${java.version}</maven.compiler.target><spring-framework.version>5.3.7</spring-framework.version><tomcat.version>9.0.46</tomcat.version><spring-data.version>2021.0.1</spring-data.version><hibernate.version>5.4.32.Final</hibernate.version><hibernate-validator.version>6.2.0.Final</hibernate-validator.version><postgresql-driver.version>42.2.20</postgresql-driver.version><jackson.version>2.12.3</jackson.version><maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version><maven-war-plugin.version>3.3.1</maven-war-plugin.version><maven-resources-plugin.version>3.2.0</maven-resources-plugin.version></properties><repositories><repository><id>demo-config</id><name>Azure DevOps</name><url>https://pkgs.dev.azure.com/ShawnHurley21/demo-config-utils/_packaging/demo-config/maven/v1</url></repository></repositories><dependencyManagement><dependencies><dependency><groupId>com.fasterxml.jackson</groupId><artifactId>jackson-bom</artifactId><version>${jackson.version}</version><scope>import</scope><type>pom</type></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-bom</artifactId><version>${spring-data.version}</version><scope>import</scope><type>pom</type></dependency></dependencies></dependencyManagement><dependencies><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-servlet-api</artifactId><version>${tomcat.version}</version><scope>provided</scope></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-core</artifactId></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-jpa</artifactId></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-jdbc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-webmvc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-web</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-actuator</artifactId><version>2.5.0</version></dependency><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-jdbc</artifactId><version>${tomcat.version}</version><scope>runtime</scope></dependency><dependency><groupId>org.hibernate</groupId><artifactId>hibernate-entitymanager</artifactId><version>${hibernate.version}</version></dependency><dependency><groupId>org.hibernate.validator</groupId><artifactId>hibernate-validator</artifactId><version>${hibernate-validator.version}</version></dependency><dependency><groupId>ch.qos.logback</groupId><artifactId>logback-classic</artifactId><version>1.1.7</version></dependency><dependency><groupId>com.oracle.database.jdbc</groupId><artifactId>ojdbc8</artifactId><version>21.1.0.0</version></dependency><dependency><groupId>org.postgresql</groupId><artifactId>postgresql</artifactId><version>42.2.23</version></dependency><!-- Corporate libraries --><dependency><groupId>io.konveyor.demo</groupId><artifactId>config-utils</artifactId><version>1.0.0</version></dependency></dependencies><build><plugins><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-compiler-plugin</artifactId><version>${maven-compiler-plugin.version}</version></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-war-plugin</artifactId><version>${maven-war-plugin.version}</version><configuration><failOnMissingWebXml>false</failOnMissingWebXml></configuration></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-resources-plugin</artifactId><version>${maven-resources-plugin.version}</version><configuration><encoding>UTF-8</encoding></configuration></plugin></plugins></build>
      links:
      - url: https://quarkus.io/guides/maven-tooling#build-tool-maven
        title: Quarkus - Guide
      effort: 1
    javaee-pom-to-quarkus-00030:
      description: |
        Adopt Maven Compiler plugin
      category: mandatory
      labels:
      - konveyor.io/source=java-ee
      - konveyor.io/target=quarkus
      incidents:
      - uri: file:///opt/input/source/pom.xml
        message: Use the Maven Compiler plugin adding the following sections to the `pom.xml` file:. ```xml. <properties>. <compiler-plugin.version>3.10.1</compiler-plugin.version>. <maven.compiler.release>11</maven.compiler.release>. </properties>. <build>. <plugins>. <plugin>. <artifactId>maven-compiler-plugin</artifactId>. <version>$</version>. <configuration>. <compilerArgs>. <arg>-parameters</arg>. </compilerArgs>. </configuration>. </plugin>. </plugins>. </build>. ```
        variables:
          data: project
          innerText: "\n\t4.0.0\n\tio.konveyor.demo\n\tcustomers-tomcat\n\t0.0.1-SNAPSHOT\n\n\tOrder Management\n\twar\n\tRemaining services for the legacy Order Management application\n\n\t\n\t\t1.8\n\t\tUTF-8\n\t\tUTF-8\n\t\t${java.version}\n\t\t${java.version}\n\t\t5.3.7\n\t\t9.0.46\n\t\t2021.0.1\n\t\t5.4.32.Final\n\t\t6.2.0.Final\n\n\t\t42.2.20\n\t\t2.12.3\n\n\t\t3.8.1\n\t\t3.3.1\n\t\t3.2.0\n\n\t\n\n\t\n\t\t\n\t\t\tdemo-config\n\t\t\tAzure DevOps\n\t\t\thttps://pkgs.dev.azure.com/ShawnHurley21/demo-config-utils/_packaging/demo-config/maven/v1\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\n\t\t\t\tcom.fasterxml.jackson\n\t\t\t\tjackson-bom\n\t\t\t\t${jackson.version}\n\t\t\t\timport\n\t\t\t\tpom\n\t\t\t\n\t\t\t\n\t\t\t\torg.springframework.data\n\t\t\t\tspring-data-bom\n\t\t\t\t${spring-data.version}\n\t\t\t\timport\n\t\t\t\tpom\n\t\t\t\n\t\t\n\t\n\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-servlet-api\n\t\t\t${tomcat.version}\n\t\t\tprovided\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-core\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-databind\n\t\t\n\t\t\n\t\t\torg.springframework.data\n\t\t\tspring-data-jpa\n\t\t\n\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-jdbc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-webmvc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-web\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework.boot\n\t\t\tspring-boot-starter-actuator\n\t\t\t2.5.0\n\t\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-jdbc\n\t\t\t${tomcat.version}\n\t\t\truntime\n\t\t\n\t\t\n\t\t\torg.hibernate\n\t\t\thibernate-entitymanager\n\t\t\t${hibernate.version}\n\t\t\n\t\t\n\t\t\torg.hibernate.validator\n\t\t\thibernate-validator\n\t\t\t${hibernate-validator.version}\n\t\t\n\t\t\n\t\t\tch.qos.logback\n\t\t\tlogback-classic\n\t\t\t1.1.7\n\t\t\n\t\t\n\t\t\tcom.oracle.database.jdbc\n\t\t\tojdbc8\n\t\t\t21.1.0.0\n\t\t\n\t\t\n\t\t\torg.postgresql\n\t\t\tpostgresql\n\t\t\t42.2.23\n\t\t\n\t\t\n\t\t\n\t\t\tio.konveyor.demo\n\t\t\tconfig-utils\n\t\t\t1.0.0\n\t\t\n\n\t\n\t\n\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-compiler-plugin\n\t\t\t\t${maven-compiler-plugin.version}\n\t\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-war-plugin\n\t\t\t\t${maven-war-plugin.version}\n\t\t\t\t\n\t\t\t\t\tfalse\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-resources-plugin\n\t\t\t\t${maven-resources-plugin.version}\n\t\t\t\t\n\t\t\t\t\tUTF-8\n\t\t\t\t\n\t\t\t\n\t\t\n\t\n\n"
          matchingXML: <modelVersion>4.0.0</modelVersion><groupId>io.konveyor.demo</groupId><artifactId>customers-tomcat</artifactId><version>0.0.1-SNAPSHOT</version><name>Order Management</name><packaging>war</packaging><description>Remaining services for the legacy Order Management application</description><properties><java.version>1.8</java.version><project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><maven.compiler.source>${java.version}</maven.compiler.source><maven.compiler.target>${java.version}</maven.compiler.target><spring-framework.version>5.3.7</spring-framework.version><tomcat.version>9.0.46</tomcat.version><spring-data.version>2021.0.1</spring-data.version><hibernate.version>5.4.32.Final</hibernate.version><hibernate-validator.version>6.2.0.Final</hibernate-validator.version><postgresql-driver.version>42.2.20</postgresql-driver.version><jackson.version>2.12.3</jackson.version><maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version><maven-war-plugin.version>3.3.1</maven-war-plugin.version><maven-resources-plugin.version>3.2.0</maven-resources-plugin.version></properties><repositories><repository><id>demo-config</id><name>Azure DevOps</name><url>https://pkgs.dev.azure.com/ShawnHurley21/demo-config-utils/_packaging/demo-config/maven/v1</url></repository></repositories><dependencyManagement><dependencies><dependency><groupId>com.fasterxml.jackson</groupId><artifactId>jackson-bom</artifactId><version>${jackson.version}</version><scope>import</scope><type>pom</type></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-bom</artifactId><version>${spring-data.version}</version><scope>import</scope><type>pom</type></dependency></dependencies></dependencyManagement><dependencies><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-servlet-api</artifactId><version>${tomcat.version}</version><scope>provided</scope></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-core</artifactId></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-jpa</artifactId></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-jdbc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-webmvc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-web</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-actuator</artifactId><version>2.5.0</version></dependency><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-jdbc</artifactId><version>${tomcat.version}</version><scope>runtime</scope></dependency><dependency><groupId>org.hibernate</groupId><artifactId>hibernate-entitymanager</artifactId><version>${hibernate.version}</version></dependency><dependency><groupId>org.hibernate.validator</groupId><artifactId>hibernate-validator</artifactId><version>${hibernate-validator.version}</version></dependency><dependency><groupId>ch.qos.logback</groupId><artifactId>logback-classic</artifactId><version>1.1.7</version></dependency><dependency><groupId>com.oracle.database.jdbc</groupId><artifactId>ojdbc8</artifactId><version>21.1.0.0</version></dependency><dependency><groupId>org.postgresql</groupId><artifactId>postgresql</artifactId><version>42.2.23</version></dependency><!-- Corporate libraries --><dependency><groupId>io.konveyor.demo</groupId><artifactId>config-utils</artifactId><version>1.0.0</version></dependency></dependencies><build><plugins><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-compiler-plugin</artifactId><version>${maven-compiler-plugin.version}</version></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-war-plugin</artifactId><version>${maven-war-plugin.version}</version><configuration><failOnMissingWebXml>false</failOnMissingWebXml></configuration></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-resources-plugin</artifactId><version>${maven-resources-plugin.version}</version><configuration><encoding>UTF-8</encoding></configuration></plugin></plugins></build>
      links:
      - url: https://quarkus.io/guides/maven-tooling#build-tool-maven
        title: Quarkus - Guide
      effort: 1
    javaee-pom-to-quarkus-00040:
      description: |
        Adopt Maven Surefire plugin
      category: mandatory
      labels:
      - konveyor.io/source=java-ee
      - konveyor.io/target=quarkus
      incidents:
      - uri: file:///opt/input/source/pom.xml
        message: Use the Maven Surefire plugin adding the following sections to the `pom.xml` file:. ```xml. <properties>. <surefire-plugin.version>3.0.0</compiler-plugin.version>. </properties>. <build>. <plugins>. <plugin>. <artifactId>maven-surefire-plugin</artifactId>. <version>$</version>. <configuration>. <systemPropertyVariables>. <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>. <maven.home>$</maven.home>. </systemPropertyVariables>. </configuration>. </plugin>. </plugins>. </build>. ```
        variables:
          data: project
          innerText: "\n\t4.0.0\n\tio.konveyor.demo\n\tcustomers-tomcat\n\t0.0.1-SNAPSHOT\n\n\tOrder Management\n\twar\n\tRemaining services for the legacy Order Management application\n\n\t\n\t\t1.8\n\t\tUTF-8\n\t\tUTF-8\n\t\t${java.version}\n\t\t${java.version}\n\t\t5.3.7\n\t\t9.0.46\n\t\t2021.0.1\n\t\t5.4.32.Final\n\t\t6.2.0.Final\n\n\t\t42.2.20\n\t\t2.12.3\n\n\t\t3.8.1\n\t\t3.3.1\n\t\t3.2.0\n\n\t\n\n\t\n\t\t\n\t\t\tdemo-config\n\t\t\tAzure DevOps\n\t\t\thttps://pkgs.dev.azure.com/ShawnHurley21/demo-config-utils/_packaging/demo-config/maven/v1\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\n\t\t\t\tcom.fasterxml.jackson\n\t\t\t\tjackson-bom\n\t\t\t\t${jackson.version}\n\t\t\t\timport\n\t\t\t\tpom\n\t\t\t\n\t\t\t\n\t\t\t\torg.springframework.data\n\t\t\t\tspring-data-bom\n\t\t\t\t${spring-data.version}\n\t\t\t\timport\n\t\t\t\tpom\n\t\t\t\n\t\t\n\t\n\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-servlet-api\n\t\t\t${tomcat.version}\n\t\t\tprovided\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-core\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-databind\n\t\t\n\t\t\n\t\t\torg.springframework.data\n\t\t\tspring-data-jpa\n\t\t\n\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-jdbc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-webmvc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-web\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework.boot\n\t\t\tspring-boot-starter-actuator\n\t\t\t2.5.0\n\t\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-jdbc\n\t\t\t${tomcat.version}\n\t\t\truntime\n\t\t\n\t\t\n\t\t\torg.hibernate\n\t\t\thibernate-entitymanager\n\t\t\t${hibernate.version}\n\t\t\n\t\t\n\t\t\torg.hibernate.validator\n\t\t\thibernate-validator\n\t\t\t${hibernate-validator.version}\n\t\t\n\t\t\n\t\t\tch.qos.logback\n\t\t\tlogback-classic\n\t\t\t1.1.7\n\t\t\n\t\t\n\t\t\tcom.oracle.database.jdbc\n\t\t\tojdbc8\n\t\t\t21.1.0.0\n\t\t\n\t\t\n\t\t\torg.postgresql\n\t\t\tpostgresql\n\t\t\t42.2.23\n\t\t\n\t\t\n\t\t\n\t\t\tio.konveyor.demo\n\t\t\tconfig-utils\n\t\t\t1.0.0\n\t\t\n\n\t\n\t\n\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-compiler-plugin\n\t\t\t\t${maven-compiler-plugin.version}\n\t\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-war-plugin\n\t\t\t\t${maven-war-plugin.version}\n\t\t\t\t\n\t\t\t\t\tfalse\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-resources-plugin\n\t\t\t\t${maven-resources-plugin.version}\n\t\t\t\t\n\t\t\t\t\tUTF-8\n\t\t\t\t\n\t\t\t\n\t\t\n\t\n\n"
          matchingXML: <modelVersion>4.0.0</modelVersion><groupId>io.konveyor.demo</groupId><artifactId>customers-tomcat</artifactId><version>0.0.1-SNAPSHOT</version><name>Order Management</name><packaging>war</packaging><description>Remaining services for the legacy Order Management application</description><properties><java.version>1.8</java.version><project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><maven.compiler.source>${java.version}</maven.compiler.source><maven.compiler.target>${java.version}</maven.compiler.target><spring-framework.version>5.3.7</spring-framework.version><tomcat.version>9.0.46</tomcat.version><spring-data.version>2021.0.1</spring-data.version><hibernate.version>5.4.32.Final</hibernate.version><hibernate-validator.version>6.2.0.Final</hibernate-validator.version><postgresql-driver.version>42.2.20</postgresql-driver.version><jackson.version>2.12.3</jackson.version><maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version><maven-war-plugin.version>3.3.1</maven-war-plugin.version><maven-resources-plugin.version>3.2.0</maven-resources-plugin.version></properties><repositories><repository><id>demo-config</id><name>Azure DevOps</name><url>https://pkgs.dev.azure.com/ShawnHurley21/demo-config-utils/_packaging/demo-config/maven/v1</url></repository></repositories><dependencyManagement><dependencies><dependency><groupId>com.fasterxml.jackson</groupId><artifactId>jackson-bom</artifactId><version>${jackson.version}</version><scope>import</scope><type>pom</type></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-bom</artifactId><version>${spring-data.version}</version><scope>import</scope><type>pom</type></dependency></dependencies></dependencyManagement><dependencies><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-servlet-api</artifactId><version>${tomcat.version}</version><scope>provided</scope></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-core</artifactId></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-jpa</artifactId></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-jdbc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-webmvc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-web</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-actuator</artifactId><version>2.5.0</version></dependency><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-jdbc</artifactId><version>${tomcat.version}</version><scope>runtime</scope></dependency><dependency><groupId>org.hibernate</groupId><artifactId>hibernate-entitymanager</artifactId><version>${hibernate.version}</version></dependency><dependency><groupId>org.hibernate.validator</groupId><artifactId>hibernate-validator</artifactId><version>${hibernate-validator.version}</version></dependency><dependency><groupId>ch.qos.logback</groupId><artifactId>logback-classic</artifactId><version>1.1.7</version></dependency><dependency><groupId>com.oracle.database.jdbc</groupId><artifactId>ojdbc8</artifactId><version>21.1.0.0</version></dependency><dependency><groupId>org.postgresql</groupId><artifactId>postgresql</artifactId><version>42.2.23</version></dependency><!-- Corporate libraries --><dependency><groupId>io.konveyor.demo</groupId><artifactId>config-utils</artifactId><version>1.0.0</version></dependency></dependencies><build><plugins><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-compiler-plugin</artifactId><version>${maven-compiler-plugin.version}</version></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-war-plugin</artifactId><version>${maven-war-plugin.version}</version><configuration><failOnMissingWebXml>false</failOnMissingWebXml></configuration></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-resources-plugin</artifactId><version>${maven-resources-plugin.version}</version><configuration><encoding>UTF-8</encoding></configuration></plugin></plugins></build>
      links:
      - url: https://quarkus.io/guides/maven-tooling#build-tool-maven
        title: Quarkus - Guide
      effort: 1
    javaee-pom-to-quarkus-00050:
      description: |
        Adopt Maven Failsafe plugin
      category: mandatory
      labels:
      - konveyor.io/source=java-ee
      - konveyor.io/target=quarkus
      incidents:
      - uri: file:///opt/input/source/pom.xml
        message: Use the Maven Failsafe plugin adding the following sections to the `pom.xml` file:. ```xml. <properties>. <surefire-plugin.version>3.0.0</compiler-plugin.version>. </properties>. <build>. <plugins>. <plugin>. <artifactId>maven-failsafe-plugin</artifactId>. <version>$</version>. <executions>. <execution>. <goals>. <goals>integration-test</goal>. <goals>verify</goal>. </goals>. <configuration>. <systemPropertyVariables>. <native.image.path>$/$-runner</native.image.path>. <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>. <maven.home>$</maven.home>. </systemPropertyVariables>. </configuration>. </execution>. </executions>. </plugin>. </plugins>. </build>. ```
        variables:
          data: project
          innerText: "\n\t4.0.0\n\tio.konveyor.demo\n\tcustomers-tomcat\n\t0.0.1-SNAPSHOT\n\n\tOrder Management\n\twar\n\tRemaining services for the legacy Order Management application\n\n\t\n\t\t1.8\n\t\tUTF-8\n\t\tUTF-8\n\t\t${java.version}\n\t\t${java.version}\n\t\t5.3.7\n\t\t9.0.46\n\t\t2021.0.1\n\t\t5.4.32.Final\n\t\t6.2.0.Final\n\n\t\t42.2.20\n\t\t2.12.3\n\n\t\t3.8.1\n\t\t3.3.1\n\t\t3.2.0\n\n\t\n\n\t\n\t\t\n\t\t\tdemo-config\n\t\t\tAzure DevOps\n\t\t\thttps://pkgs.dev.azure.com/ShawnHurley21/demo-config-utils/_packaging/demo-config/maven/v1\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\n\t\t\t\tcom.fasterxml.jackson\n\t\t\t\tjackson-bom\n\t\t\t\t${jackson.version}\n\t\t\t\timport\n\t\t\t\tpom\n\t\t\t\n\t\t\t\n\t\t\t\torg.springframework.data\n\t\t\t\tspring-data-bom\n\t\t\t\t${spring-data.version}\n\t\t\t\timport\n\t\t\t\tpom\n\t\t\t\n\t\t\n\t\n\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-servlet-api\n\t\t\t${tomcat.version}\n\t\t\tprovided\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-core\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-databind\n\t\t\n\t\t\n\t\t\torg.springframework.data\n\t\t\tspring-data-jpa\n\t\t\n\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-jdbc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-webmvc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-web\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework.boot\n\t\t\tspring-boot-starter-actuator\n\t\t\t2.5.0\n\t\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-jdbc\n\t\t\t${tomcat.version}\n\t\t\truntime\n\t\t\n\t\t\n\t\t\torg.hibernate\n\t\t\thibernate-entitymanager\n\t\t\t${hibernate.version}\n\t\t\n\t\t\n\t\t\torg.hibernate.validator\n\t\t\thibernate-validator\n\t\t\t${hibernate-validator.version}\n\t\t\n\t\t\n\t\t\tch.qos.logback\n\t\t\tlogback-classic\n\t\t\t1.1.7\n\t\t\n\t\t\n\t\t\tcom.oracle.database.jdbc\n\t\t\tojdbc8\n\t\t\t21.1.0.0\n\t\t\n\t\t\n\t\t\torg.postgresql\n\t\t\tpostgresql\n\t\t\t42.2.23\n\t\t\n\t\t\n\t\t\n\t\t\tio.konveyor.demo\n\t\t\tconfig-utils\n\t\t\t1.0.0\n\t\t\n\n\t\n\t\n\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-compiler-plugin\n\t\t\t\t${maven-compiler-plugin.version}\n\t\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-war-plugin\n\t\t\t\t${maven-war-plugin.version}\n\t\t\t\t\n\t\t\t\t\tfalse\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-resources-plugin\n\t\t\t\t${maven-resources-plugin.version}\n\t\t\t\t\n\t\t\t\t\tUTF-8\n\t\t\t\t\n\t\t\t\n\t\t\n\t\n\n"
          matchingXML: <modelVersion>4.0.0</modelVersion><groupId>io.konveyor.demo</groupId><artifactId>customers-tomcat</artifactId><version>0.0.1-SNAPSHOT</version><name>Order Management</name><packaging>war</packaging><description>Remaining services for the legacy Order Management application</description><properties><java.version>1.8</java.version><project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><maven.compiler.source>${java.version}</maven.compiler.source><maven.compiler.target>${java.version}</maven.compiler.target><spring-framework.version>5.3.7</spring-framework.version><tomcat.version>9.0.46</tomcat.version><spring-data.version>2021.0.1</spring-data.version><hibernate.version>5.4.32.Final</hibernate.version><hibernate-validator.version>6.2.0.Final</hibernate-validator.version><postgresql-driver.version>42.2.20</postgresql-driver.version><jackson.version>2.12.3</jackson.version><maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version><maven-war-plugin.version>3.3.1</maven-war-plugin.version><maven-resources-plugin.version>3.2.0</maven-resources-plugin.version></properties><repositories><repository><id>demo-config</id><name>Azure DevOps</name><url>https://pkgs.dev.azure.com/ShawnHurley21/demo-config-utils/_packaging/demo-config/maven/v1</url></repository></repositories><dependencyManagement><dependencies><dependency><groupId>com.fasterxml.jackson</groupId><artifactId>jackson-bom</artifactId><version>${jackson.version}</version><scope>import</scope><type>pom</type></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-bom</artifactId><version>${spring-data.version}</version><scope>import</scope><type>pom</type></dependency></dependencies></dependencyManagement><dependencies><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-servlet-api</artifactId><version>${tomcat.version}</version><scope>provided</scope></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-core</artifactId></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-jpa</artifactId></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-jdbc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-webmvc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-web</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-actuator</artifactId><version>2.5.0</version></dependency><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-jdbc</artifactId><version>${tomcat.version}</version><scope>runtime</scope></dependency><dependency><groupId>org.hibernate</groupId><artifactId>hibernate-entitymanager</artifactId><version>${hibernate.version}</version></dependency><dependency><groupId>org.hibernate.validator</groupId><artifactId>hibernate-validator</artifactId><version>${hibernate-validator.version}</version></dependency><dependency><groupId>ch.qos.logback</groupId><artifactId>logback-classic</artifactId><version>1.1.7</version></dependency><dependency><groupId>com.oracle.database.jdbc</groupId><artifactId>ojdbc8</artifactId><version>21.1.0.0</version></dependency><dependency><groupId>org.postgresql</groupId><artifactId>postgresql</artifactId><version>42.2.23</version></dependency><!-- Corporate libraries --><dependency><groupId>io.konveyor.demo</groupId><artifactId>config-utils</artifactId><version>1.0.0</version></dependency></dependencies><build><plugins><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-compiler-plugin</artifactId><version>${maven-compiler-plugin.version}</version></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-war-plugin</artifactId><version>${maven-war-plugin.version}</version><configuration><failOnMissingWebXml>false</failOnMissingWebXml></configuration></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-resources-plugin</artifactId><version>${maven-resources-plugin.version}</version><configuration><encoding>UTF-8</encoding></configuration></plugin></plugins></build>
      links:
      - url: https://quarkus.io/guides/maven-tooling#build-tool-maven
        title: Quarkus - Guide
      effort: 1
    javaee-pom-to-quarkus-00060:
      description: |-
        Add Maven profile to run the Quarkus native build
        Leverage a Maven profile to run the Quarkus native build adding the following section to the `pom.xml` file:. ```xml. <profiles>. <profile>. <id>native</id>. <activation>. <property>. <name>native</name>. </property>. </activation>. <properties>. <skipITs>false</skipITs>. <quarkus.package.type>native</quarkus.package.type>. </properties>. </profile>. </profiles>. ```
      category: mandatory
      labels:
      - konveyor.io/source=java-ee
      - konveyor.io/target=quarkus
      incidents:
      - uri: file:///opt/input/source/pom.xml
        message: Leverage a Maven profile to run the Quarkus native build adding the following section to the `pom.xml` file:. ```xml. <profiles>. <profile>. <id>native</id>. <activation>. <property>. <name>native</name>. </property>. </activation>. <properties>. <skipITs>false</skipITs>. <quarkus.package.type>native</quarkus.package.type>. </properties>. </profile>. </profiles>. ```
        variables:
          data: project
          innerText: "\n\t4.0.0\n\tio.konveyor.demo\n\tcustomers-tomcat\n\t0.0.1-SNAPSHOT\n\n\tOrder Management\n\twar\n\tRemaining services for the legacy Order Management application\n\n\t\n\t\t1.8\n\t\tUTF-8\n\t\tUTF-8\n\t\t${java.version}\n\t\t${java.version}\n\t\t5.3.7\n\t\t9.0.46\n\t\t2021.0.1\n\t\t5.4.32.Final\n\t\t6.2.0.Final\n\n\t\t42.2.20\n\t\t2.12.3\n\n\t\t3.8.1\n\t\t3.3.1\n\t\t3.2.0\n\n\t\n\n\t\n\t\t\n\t\t\tdemo-config\n\t\t\tAzure DevOps\n\t\t\thttps://pkgs.dev.azure.com/ShawnHurley21/demo-config-utils/_packaging/demo-config/maven/v1\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\n\t\t\t\tcom.fasterxml.jackson\n\t\t\t\tjackson-bom\n\t\t\t\t${jackson.version}\n\t\t\t\timport\n\t\t\t\tpom\n\t\t\t\n\t\t\t\n\t\t\t\torg.springframework.data\n\t\t\t\tspring-data-bom\n\t\t\t\t${spring-data.version}\n\t\t\t\timport\n\t\t\t\tpom\n\t\t\t\n\t\t\n\t\n\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-servlet-api\n\t\t\t${tomcat.version}\n\t\t\tprovided\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-core\n\t\t\n\t\t\n\t\t\tcom.fasterxml.jackson.core\n\t\t\tjackson-databind\n\t\t\n\t\t\n\t\t\torg.springframework.data\n\t\t\tspring-data-jpa\n\t\t\n\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-jdbc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-webmvc\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework\n\t\t\tspring-web\n\t\t\t${spring-framework.version}\n\t\t\n\t\t\n\t\t\torg.springframework.boot\n\t\t\tspring-boot-starter-actuator\n\t\t\t2.5.0\n\t\t\n\t\t\n\t\t\torg.apache.tomcat\n\t\t\ttomcat-jdbc\n\t\t\t${tomcat.version}\n\t\t\truntime\n\t\t\n\t\t\n\t\t\torg.hibernate\n\t\t\thibernate-entitymanager\n\t\t\t${hibernate.version}\n\t\t\n\t\t\n\t\t\torg.hibernate.validator\n\t\t\thibernate-validator\n\t\t\t${hibernate-validator.version}\n\t\t\n\t\t\n\t\t\tch.qos.logback\n\t\t\tlogback-classic\n\t\t\t1.1.7\n\t\t\n\t\t\n\t\t\tcom.oracle.database.jdbc\n\t\t\tojdbc8\n\t\t\t21.1.0.0\n\t\t\n\t\t\n\t\t\torg.postgresql\n\t\t\tpostgresql\n\t\t\t42.2.23\n\t\t\n\t\t\n\t\t\n\t\t\tio.konveyor.demo\n\t\t\tconfig-utils\n\t\t\t1.0.0\n\t\t\n\n\t\n\t\n\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-compiler-plugin\n\t\t\t\t${maven-compiler-plugin.version}\n\t\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-war-plugin\n\t\t\t\t${maven-war-plugin.version}\n\t\t\t\t\n\t\t\t\t\tfalse\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\torg.apache.maven.plugins\n\t\t\t\tmaven-resources-plugin\n\t\t\t\t${maven-resources-plugin.version}\n\t\t\t\t\n\t\t\t\t\tUTF-8\n\t\t\t\t\n\t\t\t\n\t\t\n\t\n\n"
          matchingXML: <modelVersion>4.0.0</modelVersion><groupId>io.konveyor.demo</groupId><artifactId>customers-tomcat</artifactId><version>0.0.1-SNAPSHOT</version><name>Order Management</name><packaging>war</packaging><description>Remaining services for the legacy Order Management application</description><properties><java.version>1.8</java.version><project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><maven.compiler.source>${java.version}</maven.compiler.source><maven.compiler.target>${java.version}</maven.compiler.target><spring-framework.version>5.3.7</spring-framework.version><tomcat.version>9.0.46</tomcat.version><spring-data.version>2021.0.1</spring-data.version><hibernate.version>5.4.32.Final</hibernate.version><hibernate-validator.version>6.2.0.Final</hibernate-validator.version><postgresql-driver.version>42.2.20</postgresql-driver.version><jackson.version>2.12.3</jackson.version><maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version><maven-war-plugin.version>3.3.1</maven-war-plugin.version><maven-resources-plugin.version>3.2.0</maven-resources-plugin.version></properties><repositories><repository><id>demo-config</id><name>Azure DevOps</name><url>https://pkgs.dev.azure.com/ShawnHurley21/demo-config-utils/_packaging/demo-config/maven/v1</url></repository></repositories><dependencyManagement><dependencies><dependency><groupId>com.fasterxml.jackson</groupId><artifactId>jackson-bom</artifactId><version>${jackson.version}</version><scope>import</scope><type>pom</type></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-bom</artifactId><version>${spring-data.version}</version><scope>import</scope><type>pom</type></dependency></dependencies></dependencyManagement><dependencies><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-servlet-api</artifactId><version>${tomcat.version}</version><scope>provided</scope></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-core</artifactId></dependency><dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId></dependency><dependency><groupId>org.springframework.data</groupId><artifactId>spring-data-jpa</artifactId></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-jdbc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-webmvc</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework</groupId><artifactId>spring-web</artifactId><version>${spring-framework.version}</version></dependency><dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-actuator</artifactId><version>2.5.0</version></dependency><dependency><groupId>org.apache.tomcat</groupId><artifactId>tomcat-jdbc</artifactId><version>${tomcat.version}</version><scope>runtime</scope></dependency><dependency><groupId>org.hibernate</groupId><artifactId>hibernate-entitymanager</artifactId><version>${hibernate.version}</version></dependency><dependency><groupId>org.hibernate.validator</groupId><artifactId>hibernate-validator</artifactId><version>${hibernate-validator.version}</version></dependency><dependency><groupId>ch.qos.logback</groupId><artifactId>logback-classic</artifactId><version>1.1.7</version></dependency><dependency><groupId>com.oracle.database.jdbc</groupId><artifactId>ojdbc8</artifactId><version>21.1.0.0</version></dependency><dependency><groupId>org.postgresql</groupId><artifactId>postgresql</artifactId><version>42.2.23</version></dependency><!-- Corporate libraries --><dependency><groupId>io.konveyor.demo</groupId><artifactId>config-utils</artifactId><version>1.0.0</version></dependency></dependencies><build><plugins><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-compiler-plugin</artifactId><version>${maven-compiler-plugin.version}</version></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-war-plugin</artifactId><version>${maven-war-plugin.version}</version><configuration><failOnMissingWebXml>false</failOnMissingWebXml></configuration></plugin><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-resources-plugin</artifactId><version>${maven-resources-plugin.version}</version><configuration><encoding>UTF-8</encoding></configuration></plugin></plugins></build>
      links:
      - url: https://quarkus.io/guides/maven-tooling#build-tool-maven
        title: Quarkus - Guide
      effort: 1
    javaee-pom-to-quarkus-00070:
      description: |-
        Configure Quarkus hibernate-orm
        Configure Quarkus 'hibernate-orm` and jakarta persistence.. Add the `quarkus-hibernate-orm` section and one for your preferred jdbc solution to the `pom.xml` file, eg for postgres:. ```. <!-- Hibernate ORM specific dependencies -->. <dependency>. <groupId>io.quarkus</groupId>. <artifactId>quarkus-hibernate-orm</artifactId>. </dependency>. <!-- JDBC driver dependencies -->. <dependency>. <groupId>io.quarkus</groupId>. <artifactId>quarkus-jdbc-postgresql</artifactId>. </dependency>. ```
      category: mandatory
      labels:
      - konveyor.io/source=java-ee
      - konveyor.io/target=quarkus
      incidents:
      - uri: file:///opt/input/source/pom.xml
        message: Configure Quarkus 'hibernate-orm` and jakarta persistence.. Add the `quarkus-hibernate-orm` section and one for your preferred jdbc solution to the `pom.xml` file, eg for postgres:. ```. <!-- Hibernate ORM specific dependencies -->. <dependency>. <groupId>io.quarkus</groupId>. <artifactId>quarkus-hibernate-orm</artifactId>. </dependency>. <!-- JDBC driver dependencies -->. <dependency>. <groupId>io.quarkus</groupId>. <artifactId>quarkus-jdbc-postgresql</artifactId>. </dependency>. ```
        variables:
          data: groupId
          innerText: org.hibernate
          matchingXML: org.hibernate
      links:
      - url: https://quarkus.io/guides/hibernate-orm
        title: Using hibernate-orm and jakarta persistence
      effort: 1
  unmatched:
  - quarkus-agroal-00000
  - quarkus-amazon-dynamodb-00000
  - quarkus-agroal-00010
  - quarkus-amazon-iam-00010
  - quarkus-amazon-kms-00000
  - quarkus-amazon-dynamodb-00010
  - quarkus-amazon-kms-00010
  - quarkus-amazon-lambda-http-00010
  - quarkus-amazon-iam-00000
  - quarkus-amazon-lambda-http-00000
  - quarkus-amazon-lambda-rest-00000
  - quarkus-amazon-lambda-rest-00010
  - quarkus-amazon-lambda-xray-00000
  - quarkus-amazon-lambda-xray-00010
  - quarkus-amazon-s3-00010
  - quarkus-amazon-s3-00000
  - quarkus-amazon-sns-00000
  - quarkus-amazon-ses-00000
  - quarkus-amazon-ses-00010
  - quarkus-amazon-sqs-00010
  - quarkus-amazon-sqs-00000
  - quarkus-amazon-sns-00010
  - quarkus-apicurio-registry-avro-00000
  - quarkus-apicurio-registry-avro-00010
  - quarkus-artemis-jms-00000
  - quarkus-artemis-jms-00010
  - quarkus-amazon-ssm-00000
  - quarkus-amazon-ssm-00010
  - quarkus-avro-00010
  - quarkus-avro-00000
  - quarkus-config-yaml-00010
  - quarkus-config-yaml-00000
  - quarkus-elytron-security-jdbc-00000
  - quarkus-elytron-security-jdbc-00010
  - quarkus-elytron-security-ldap-00000
  - quarkus-elytron-security-oauth2-00000
  - quarkus-flyway-00000
  - quarkus-flyway-00010
  - quarkus-hibernate-envers-00000
  - quarkus-elytron-security-ldap-00010
  - quarkus-hibernate-reactive-00000
  - quarkus-hibernate-reactive-00010
  - quarkus-hibernate-envers-00010
  - quarkus-hibernate-search-orm-elasticsearch-aws-00010
  - quarkus-hibernate-validator-00000
  - quarkus-hibernate-validator-00010
  - quarkus-jdbc-db2-00000
  - quarkus-hibernate-search-orm-elasticsearch-aws-00000
  - quarkus-elytron-security-oauth2-00010
  - quarkus-jdbc-derby-00000
  - quarkus-jdbc-mariadb-00010
  - quarkus-jdbc-mariadb-00000
  - quarkus-jdbc-db2-00010
  - quarkus-jdbc-derby-00010
  - quarkus-jdbc-oracle-00010
  - quarkus-jdbc-oracle-00000
  - quarkus-jdbc-mysql-00000
  - quarkus-jsonb-00000
  - quarkus-jdbc-postgresql-00010
  - quarkus-jdbc-mysql-00010
  - quarkus-jdbc-postgresql-00000
  - quarkus-jsonb-00010
  - quarkus-kafka-client-00000
  - quarkus-kafka-streams-00000
  - quarkus-jsonp-00010
  - quarkus-keycloak-admin-client-00010
  - quarkus-keycloak-admin-client-00000
  - quarkus-kafka-streams-00010
  - quarkus-jsonp-00000
  - quarkus-liquibase-00000
  - quarkus-liquibase-00010
  - quarkus-kubernetes-client-00000
  - quarkus-liquibase-mongodb-00000
  - quarkus-kubernetes-client-00010
  - quarkus-kafka-client-00010
  - springboot-cache-to-quarkus-00000
  - quarkus-liquibase-mongodb-00010
  - quarkus-logging-gelf-00010
  - quarkus-logging-sentry-00000
  - springboot-cloud-config-client-to-quarkus-00000
  - springboot-actuator-to-quarkus-0200
  - quarkus-logging-gelf-00000
  - springboot-devtools-to-quarkus-0000
  - springboot-di-to-quarkus-00000
  - quarkus-logging-sentry-00010
  - springboot-jpa-to-quarkus-00000
  - springboot-generic-catchall-00100
  - springboot-di-to-quarkus-00001
  - springboot-jmx-to-quarkus-00000
  - springboot-integration-to-quarkus-00010
  - springboot-actuator-to-quarkus-0100
  - springboot-integration-to-quarkus-00020
  - springboot-metrics-to-quarkus-0100
  - springboot-metrics-to-quarkus-0200
  - springboot-plugins-to-quarkus-0000
  - springboot-parent-pom-to-quarkus-00000
  - springboot-metrics-to-quarkus-0300
  - springboot-properties-to-quarkus-00000
  - springboot-properties-to-quarkus-00001
  - springboot-properties-to-quarkus-00003
  - springboot-properties-to-quarkus-00002
  - springboot-properties-to-quarkus-00004
  - quarkus-micrometer-registry-prometheus-00000
  - quarkus-micrometer-registry-prometheus-00010
  - springboot-properties-to-quarkus-00005
  - springboot-annotations-to-quarkus-00000
  - springboot-shell-to-quarkus-00000
  - springboot-properties-to-quarkus-00006
  - springboot-security-to-quarkus-00000
  - springboot-web-to-quarkus-00000
  - springboot-web-to-quarkus-00010
  - springboot-webmvc-to-quarkus-00000
  - springboot-scheduled-to-quarkus-00000
  - springboot-webmvc-to-quarkus-01000
  - quarkus-narayana-jta-00000
  - quarkus-narayana-lra-00000
  - quarkus-narayana-jta-00010
  - quarkus-narayana-stm-00000
  - quarkus-narayana-lra-00010
  - quarkus-narayana-stm-00010
  - quarkus-openshift-client-00000
  - quarkus-openshift-client-00010
  - cdi-to-quarkus-00030
  - cdi-to-quarkus-00000
  - cdi-to-quarkus-00020
  - javaee-faces-to-quarkus-00000
  - dependency-removal-for-quarkus-00000
  - javaee-pom-to-quarkus-00080
  - jaxrs-to-quarkus-00000
  - jaxrs-to-quarkus-00010
  - cdi-to-quarkus-00040
  - quarkus-opentelemetry-exporter-jaeger-00000
  - quarkus-opentelemetry-exporter-otlp-00000
  - cdi-to-quarkus-00050
  - quarkus-opentelemetry-exporter-otlp-00010
  - jaxrs-to-quarkus-00020
  - quarkus-resteasy-multipart-00000
  - quarkus-resteasy-multipart-00010
  - quarkus-opentelemetry-exporter-jaeger-00010
  - quarkus-picocli-00000
  - quarkus-picocli-00010
  - springboot-jmx-to-quarkus-00001
  - springboot-di-to-quarkus-00002
- name: rhr/springboot
  description: Verify the version of the Spring Boot framework is compatible with those supported by Red Hat Runtimes
  unmatched:
  - springboot-associated-00002
  - springboot-associated-00001
  - springboot-associated-00003
  - springboot-associated-00004
  - springboot-associated-00006
  - springboot-associated-00007
  - springboot-associated-00010
  - springboot-associated-00009
  - springboot-associated-00005
  - springboot-associated-00012
  - springboot-associated-00011
  - springboot-associated-00013
  - springboot-associated-00008
  - springboot-associated-00014
  - springboot-00001
  - springboot-associated-00015
  - springboot-00002
- name: technology-usage
  description: This ruleset adds tags the configuration management technologies so are appropriately categorized on the technology reports.
  tags:
  - Java EE=EJB XML
  - Connect=EJB XML
  - Bean=EJB XML
  - Sustain=Properties
  - Embedded=Properties
  - Other=Properties
  - Spring configuration properties annotation detected
  - Spring Properties
  - Spring Scheduled
  - Embedded framework - Spring Scheduled
  - Java Threads
  - Threads
  - Java EE Batch
  - Java EE=Java EE Batch
  - Execute=Java EE Batch
  - Processing=Java EE Batch
  - CDI
  - Execute=CDI
  - Inversion of Control=CDI
  - Java EE=CDI
  - Java EE JSON-P
  - Execute=Java EE JSON-P
  - Processing=Java EE JSON-P
  - Java EE=Java EE JSON-P
  - Servlet
  - Java Servlet
  - Java EE=Servlet
  - HTTP=Servlet
  - Connect=Servlet
  - Embedded framework - Spring MVC
  - Spring MVC
  - Spring JMX
  - Spring JMX configuration detected
  - Embedded=Hibernate
  - Object Mapping=Hibernate
  - Store=Hibernate
  - Processing=Spring Scheduled
  - Embedded=Spring Scheduled
  - Execute=Spring Scheduled
  - Java EE=JNI
  - Connect=JNI
  - Other=JNI
  - Connect=Mail
  - Other=Mail
  - Java EE=Mail
  - Mail usage
  - JCA usage
  - Connect=JCA
  - Other=JCA
  - Java EE=JCA
  - Sustain=Spring Properties
  - Configuration Management=Spring Properties
  - Embedded=Spring Properties
  unmatched:
  - technology-usage-web-01000
  - technology-usage-web-01100
  - technology-usage-web-01300
  - technology-usage-web-01400
  - technology-usage-web-01500
  - technology-usage-web-01600
  - technology-usage-web-01700
  - technology-usage-web-01800
  - technology-usage-web-01900
  - technology-usage-web-02000
  - technology-usage-web-02100
  - technology-usage-web-02200
  - technology-usage-web-02300
  - technology-usage-web-02400
  - technology-usage-test-frameworks-00010
  - technology-usage-test-frameworks-00020
  - technology-usage-test-frameworks-00030
  - technology-usage-test-frameworks-00040
  - technology-usage-test-frameworks-00050
  - technology-usage-test-frameworks-00060
  - technology-usage-test-frameworks-00070
  - technology-usage-test-frameworks-00080
  - technology-usage-test-frameworks-00090
  - technology-usage-test-frameworks-00100
  - technology-usage-test-frameworks-00110
  - technology-usage-test-frameworks-00120
  - technology-usage-test-frameworks-00130
  - technology-usage-test-frameworks-00140
  - technology-usage-test-frameworks-00150
  - technology-usage-test-frameworks-00160
  - technology-usage-test-frameworks-00170
  - technology-usage-test-frameworks-00180
  - technology-usage-test-frameworks-00190
  - technology-usage-test-frameworks-00200
  - technology-usage-test-frameworks-00210
  - technology-usage-test-frameworks-00220
  - technology-usage-test-frameworks-00230
  - technology-usage-test-frameworks-00240
  - technology-usage-test-frameworks-00250
  - technology-usage-test-frameworks-00260
  - technology-usage-test-frameworks-00270
  - technology-usage-test-frameworks-00280
  - technology-usage-test-frameworks-00290
  - technology-usage-test-frameworks-00300
  - technology-usage-test-frameworks-00310
  - technology-usage-test-frameworks-00320
  - technology-usage-test-frameworks-00330
  - technology-usage-test-frameworks-00340
  - technology-usage-test-frameworks-00350
  - technology-usage-test-frameworks-00360
  - technology-usage-test-frameworks-00370
  - technology-usage-security-01000
  - technology-usage-security-01100
  - technology-usage-security-01200
  - technology-usage-security-01300
  - technology-usage-security-01400
  - technology-usage-security-01500
  - technology-usage-security-01600
  - technology-usage-security-01700
  - technology-usage-security-01800
  - technology-usage-security-01900
  - technology-usage-security-02000
  - technology-usage-security-02100
  - technology-usage-security-02200
  - technology-usage-security-02300
  - technology-usage-security-02400
  - technology-usage-security-02500
  - technology-usage-security-02600
  - technology-usage-security-02700
  - technology-usage-security-02800
  - technology-usage-security-02900
  - technology-usage-security-03000
  - technology-usage-security-03100
  - technology-usage-security-03200
  - technology-usage-security-03300
  - technology-usage-security-03400
  - technology-usage-security-03500
  - observability-technology-usage-0100
  - observability-technology-usage-0200
  - non-xml-technology-usage-05000
  - non-xml-technology-usage-06000
  - non-xml-technology-usage-12000
  - non-xml-technology-usage-13000
  - non-xml-technology-usage-14000
  - non-xml-technology-usage-17000
  - non-xml-technology-usage-18000
  - non-xml-technology-usage-19000
  - non-xml-technology-usage-21000
  - non-xml-technology-usage-22000
  - non-xml-technology-usage-23000
  - non-xml-technology-usage-24000
  - non-xml-technology-usage-25000
  - non-xml-technology-usage-26000
  - non-xml-technology-usage-27000
  - technology-usage-mvc-01000
  - technology-usage-mvc-01100
  - technology-usage-mvc-01200
  - technology-usage-mvc-01300
  - technology-usage-mvc-01400
  - technology-usage-mvc-01500
  - technology-usage-mvc-01600
  - technology-usage-mvc-01700
  - technology-usage-mvc-01800
  - technology-usage-mvc-01900
  - technology-usage-mvc-02000
  - technology-usage-mvc-02100
  - technology-usage-mvc-02200
  - technology-usage-mvc-02300
  - technology-usage-mvc-02400
  - technology-usage-mvc-02500
  - technology-usage-mvc-02600
  - technology-usage-mvc-02700
  - technology-usage-mvc-02800
  - technology-usage-mvc-02900
  - technology-usage-mvc-03000
  - technology-usage-mvc-03100
  - technology-usage-mvc-03200
  - technology-usage-mvc-03300
  - technology-usage-mvc-03400
  - technology-usage-mvc-03500
  - technology-usage-mvc-03600
  - technology-usage-mvc-03700
  - technology-usage-mvc-03800
  - technology-usage-mvc-03900
  - technology-usage-mvc-04000
  - technology-usage-mvc-04100
  - technology-usage-mvc-0x4200
  - technology-usage-mvc-04300
  - technology-usage-mvc-04400
  - technology-usage-mvc-04500
  - technology-usage-mvc-04600
  - technology-usage-mvc-04700
  - technology-usage-mvc-04800
  - technology-usage-mvc-04900
  - technology-usage-mvc-05000
  - technology-usage-mvc-05100
  - technology-usage-mvc-05200
  - technology-usage-mvc-05300
  - technology-usage-mvc-05400
  - technology-usage-mvc-05500
  - technology-usage-mvc-05600
  - technology-usage-mvc-05700
  - technology-usage-mvc-05800
  - technology-usage-mvc-05900
  - technology-usage-mvc-06000
  - technology-usage-markup-01300
  - technology-usage-logging-00010
  - technology-usage-logging-00020
  - technology-usage-logging-00030
  - technology-usage-logging-00040
  - technology-usage-logging-00050
  - technology-usage-logging-00060
  - technology-usage-logging-00070
  - technology-usage-logging-00080
  - technology-usage-logging-00090
  - technology-usage-logging-000100
  - technology-usage-logging-000110
  - technology-usage-logging-000120
  - technology-usage-logging-000130
  - technology-usage-logging-000140
  - technology-usage-logging-000150
  - technology-usage-logging-000160
  - technology-usage-logging-000170
  - technology-usage-logging-000180
  - technology-usage-logging-000190
  - technology-usage-logging-000200
  - technology-usage-logging-000210
  - technology-usage-logging-000220
  - technology-usage-logging-000230
  - technology-usage-logging-000240
  - technology-usage-logging-000250
  - technology-usage-logging-000260
  - technology-usage-logging-000270
  - technology-usage-logging-000280
  - technology-usage-logging-000290
  - technology-usage-jta-00020
  - technology-usage-jta-00030
  - technology-usage-jta-00040
  - technology-usage-jta-00050
  - technology-usage-jta-00060
  - technology-usage-jta-00070
  - technology-usage-jta-00080
  - technology-usage-jta-00090
  - technology-usage-jta-00100
  - technology-usage-jta-00110
  - technology-usage-jta-00120
  - technology-usage-jta-00130
  - technology-usage-jta-00140
  - technology-usage-jta-00150
  - technology-usage-jta-00160
  - technology-usage-jta-00170
  - technology-usage-jta-00180
  - technology-usage-jta-00190
  - technology-usage-jta-00200
  - technology-usage-jta-00210
  - 3rd-party-01000
  - 3rd-party-02000
  - 3rd-party-03000
  - 3rd-party-04000
  - 3rd-party-05000
  - 3rd-party-06000
  - 3rd-party-07000
  - 3rd-party-08000
  - 3rd-party-09000
  - 3rd-party-10000
  - 3rd-party-11000
  - 3rd-party-12000
  - 3rd-party-13000
  - 3rd-party-14000
  - 3rd-party-15000
  - 3rd-party-16000
  - 3rd-party-17000
  - 3rd-party-18000
  - 3rd-party-19000
  - clustering-00000
  - clustering-00001
  - configuration-management-0100
  - configuration-management-0200
  - configuration-management-0300
  - configuration-management-0400
  - connect-01400
  - connect-01500
  - connect-01600
  - connect-01700
  - connect-01800
  - connect-01900
  - connect-02000
  - connect-02100
  - connect-02200
  - connect-02300
  - connect-02400
  - connect-02500
  - connect-02600
  - connect-02700
  - connect-02800
  - database-01400
  - database-01500
  - database-01600
  - database-01700
  - database-01800
  - database-01900
  - database-02000
  - database-02100
  - database-02200
  - database-02300
  - database-02400
  - database-02500
  - database-02600
  - database-02700
  - database-02800
  - database-02900
  - database-03100
  - database-03200
  - ejb-01000
  - javase-technology-usage-01000
  - embedded-framework-01000
  - embedded-framework-01010
  - embedded-framework-01100
  - embedded-framework-01200
  - embedded-framework-01300
  - embedded-framework-01400
  - embedded-framework-01500
  - embedded-framework-01600
  - embedded-framework-01700
  - embedded-framework-02000
  - embedded-framework-02200
  - embedded-framework-02300
  - embedded-framework-02400
  - embedded-framework-03000
  - embedded-framework-03100
  - embedded-framework-03200
  - embedded-framework-03300
  - embedded-framework-03400
  - embedded-framework-04700
  - embedded-framework-05000
  - embedded-framework-05100
  - embedded-framework-05300
  - embedded-framework-05400
  - embedded-framework-05500
  - embedded-framework-05600
  - embedded-framework-05700
  - embedded-framework-05800
  - embedded-framework-05900
  - embedded-framework-06000
  - embedded-framework-06100
  - embedded-framework-06200
  - embedded-framework-06300
  - embedded-framework-06400
  - embedded-framework-06500
  - embedded-framework-06600
  - embedded-framework-06700
  - embedded-framework-06800
  - embedded-framework-06900
  - embedded-framework-07000
  - embedded-framework-07100
  - embedded-framework-07200
  - embedded-framework-07300
  - embedded-framework-07400
  - embedded-framework-07500
  - embedded-framework-07600
  - embedded-framework-07700
  - embedded-framework-07800
  - embedded-framework-07900
  - embedded-framework-08000
  - embedded-framework-08100
  - embedded-framework-08200
  - embedded-framework-08300
  - embedded-framework-08400
  - embedded-framework-08500
  - embedded-framework-08600
  - embedded-framework-08800
  - embedded-framework-08900
  - embedded-framework-09100
  - embedded-framework-09000
  - embedded-framework-09200
  - embedded-framework-09300
  - integration-00001
  - integration-00002
  - integration-00003
  - integration-00004
  - integration-00005
  - integration-00006
  - integration-00007
  - integration-00008
  - integration-00009
  - integration-00010
  - integration-00011
  - integration-00012
  - integration-00013
  - integration-00014
  - integration-00015
  - integration-00016
  - integration-00017
  - jta-00020
  - jta-00030
  - jta-00040
  - jta-00050
  - jta-00060
  - jta-00070
  - jta-00080
  - jta-00090
  - jta-00100
  - jta-00110
  - jta-00120
  - jta-00130
  - jta-00140
  - jta-00150
  - jta-00160
  - jta-00170
  - jta-00180
  - jta-00190
  - jta-00200
  - jta-00210
  - javaee-technology-usage-00010
  - javaee-technology-usage-00012
  - javaee-technology-usage-00020-jakarta
  - javaee-technology-usage-00040
  - javaee-technology-usage-00050
  - javaee-technology-usage-00060
  - javaee-technology-usage-00070
  - javaee-technology-usage-00080
  - javaee-technology-usage-00090
  - javaee-technology-usage-00100
  - javaee-technology-usage-00110
  - javaee-technology-usage-00130
  - javaee-technology-usage-00140
  - javaee-technology-usage-00150
  - javaee-technology-usage-00160
  - javaee-technology-usage-00170
  - javaee-technology-usage-00180
  - javaee-technology-usage-00190
  - javaee-technology-usage-00200
  - javaee-technology-usage-00210
  - javaee-technology-usage-00220
  - javaee-technology-usage-00902
  - javaee-technology-usage-00903
  - javaee-technology-usage-00905
  - javaee-technology-usage-00906
  - javaee-technology-usage-00910
  - javaee-technology-usage-00911
  - javaee-technology-usage-00912
  - javaee-technology-usage-00913
  - javaee-technology-usage-00914
  - javaee-technology-usage-00915
  - javaee-technology-usage-00916
  - javaee-technology-usage-00917
  - javaee-technology-usage-00918
  - javaee-technology-usage-00926
  - javaee-technology-usage-00927
  - javaee-technology-usage-00928
  - javaee-technology-usage-00930
  - javaee-technology-usage-00931
  - javaee-technology-usage-00932
  - javaee-technology-usage-00950
  - javaee-technology-usage-00951
  - javaee-technology-usage-00952
  - javaee-technology-usage-00953
  - javaee-technology-usage-00954
  - javaee-technology-usage-00955
  - javaee-technology-usage-00956
  - javaee-technology-usage-00957
  - javaee-technology-usage-00958
  - logging-usage-00010
  - logging-usage-00020
  - logging-usage-00030
  - logging-usage-00040
  - logging-usage-00050
  - logging-usage-00080
  - logging-usage-00090
  - logging-usage-00100
  - logging-usage-00110
  - logging-usage-00120
  - logging-usage-00130
  - logging-usage-00140
  - logging-usage-00150
  - logging-usage-00160
  - logging-usage-00170
  - logging-usage-00180
  - logging-usage-00190
  - logging-usage-00200
  - logging-usage-00210
  - logging-usage-00220
  - logging-usage-00230
  - logging-usage-00240
  - logging-usage-00250
  - logging-usage-00260
  - logging-usage-00270
  - logging-usage-00280
  - logging-usage-00290
  - mvc-01000
  - mvc-01100
  - mvc-01200
  - mvc-01220
  - mvc-01300
  - mvc-01400
  - mvc-01500
  - mvc-01600
  - mvc-01700
  - mvc-01800
  - mvc-01900
  - mvc-02000
  - mvc-02100
  - mvc-02200
  - mvc-02300
  - mvc-02400
  - mvc-02500
  - mvc-02600
  - mvc-02700
  - mvc-02800
  - mvc-02900
  - mvc-03000
  - mvc-03100
  - mvc-03200
  - mvc-03300
  - mvc-03400
  - mvc-03500
  - mvc-03600
  - mvc-03700
  - mvc-03800
  - mvc-03900
  - mvc-04000
  - mvc-04100
  - mvc-04200
  - mvc-04300
  - mvc-04400
  - mvc-04500
  - mvc-04600
  - mvc-04700
  - mvc-04800
  - mvc-04900
  - mvc-05000
  - mvc-05100
  - mvc-05200
  - mvc-05300
  - mvc-05400
  - mvc-05500
  - mvc-05600
  - mvc-05700
  - mvc-05800
  - mvc-05900
  - mvc-06000
  - observability-0100
  - security-01100
  - security-01200
  - security-01300
  - security-01400
  - security-01500
  - security-01600
  - security-01700
  - security-01800
  - security-01900
  - security-02000
  - security-02100
  - security-02200
  - security-02300
  - security-02400
  - security-02500
  - security-02600
  - security-02700
  - security-02800
  - security-02900
  - security-03000
  - security-03100
  - security-03200
  - security-03300
  - security-03400
  - security-03500
  - security-03600
  - spring-catchall-00001
  - test-frameworks-sauge-00010
  - test-frameworks-sauge-00020
  - test-frameworks-sauge-00030
  - test-frameworks-sauge-00040
  - test-frameworks-sauge-00050
  - test-frameworks-sauge-00060
  - test-frameworks-sauge-00070
  - test-frameworks-sauge-00080
  - test-frameworks-sauge-00090
  - test-frameworks-sauge-00100
  - test-frameworks-sauge-00110
  - test-frameworks-sauge-00120
  - test-frameworks-sauge-00130
  - test-frameworks-sauge-00140
  - test-frameworks-sauge-00150
  - test-frameworks-sauge-00160
  - test-frameworks-sauge-00170
  - test-frameworks-sauge-00180
  - test-frameworks-sauge-00190
  - test-frameworks-sauge-00200
  - test-frameworks-sauge-00210
  - test-frameworks-sauge-00220
  - test-frameworks-sauge-00230
  - test-frameworks-sauge-00240
  - test-frameworks-sauge-00560
  - test-frameworks-sauge-00260
  - test-frameworks-sauge-00270
  - test-frameworks-sauge-00280
  - test-frameworks-sauge-00290
  - test-frameworks-sauge-00300
  - test-frameworks-sauge-00310
  - test-frameworks-sauge-00320
  - test-frameworks-sauge-00330
  - test-frameworks-sauge-00340
  - test-frameworks-sauge-00350
  - test-frameworks-sauge-00360
  - test-frameworks-sauge-00370
  - technology-usage-integration-00001
  - technology-usage-integration-00002
  - technology-usage-integration-00003
  - technology-usage-integration-00004
  - technology-usage-integration-00005
  - technology-usage-integration-00006
  - technology-usage-integration-00007
  - technology-usage-integration-00008
  - technology-usage-integration-00009
  - technology-usage-integration-00010
  - technology-usage-integration-00011
  - technology-usage-integration-00012
  - technology-usage-integration-00013
  - technology-usage-integration-00014
  - technology-usage-integration-00015
  - technology-usage-embedded-framework-01000
  - technology-usage-embedded-framework-01010
  - technology-usage-embedded-framework-01100
  - technology-usage-embedded-framework-01200
  - technology-usage-embedded-framework-01300
  - technology-usage-embedded-framework-01400
  - technology-usage-embedded-framework-01600
  - technology-usage-embedded-framework-01700
  - technology-usage-embedded-framework-02000
  - technology-usage-embedded-framework-02100
  - technology-usage-embedded-framework-02200
  - technology-usage-embedded-framework-02300
  - technology-usage-embedded-framework-02400
  - embedded-framework-embedded-framework-02700
  - embedded-framework-embedded-framework-02800
  - embedded-framework-embedded-framework-02900
  - embedded-framework-embedded-framework-03000
  - embedded-framework-embedded-framework-03100
  - embedded-framework-embedded-framework-03200
  - embedded-framework-embedded-framework-03300
  - embedded-framework-embedded-framework-03400
  - embedded-framework-embedded-framework-03500
  - embedded-framework-embedded-framework-03600
  - embedded-framework-embedded-framework-03700
  - embedded-framework-embedded-framework-03800
  - embedded-framework-embedded-framework-03900
  - embedded-framework-embedded-framework-04000
  - embedded-framework-embedded-framework-04100
  - embedded-framework-embedded-framework-04200
  - embedded-framework-embedded-framework-04300
  - embedded-framework-embedded-framework-04400
  - embedded-framework-embedded-framework-04500
  - embedded-framework-embedded-framework-04600
  - technology-usage-embedded-framework-04700
  - technology-usage-embedded-framework-05000
  - technology-usage-embedded-framework-05100
  - technology-usage-embedded-framework-05300
  - technology-usage-embedded-framework-05400
  - technology-usage-embedded-framework-05600
  - technology-usage-embedded-framework-05700
  - technology-usage-embedded-framework-05800
  - technology-usage-embedded-framework-05900
  - technology-usage-embedded-framework-06000
  - technology-usage-embedded-framework-06100
  - technology-usage-embedded-framework-06200
  - technology-usage-embedded-framework-06300
  - technology-usage-embedded-framework-06400
  - technology-usage-embedded-framework-06500
  - technology-usage-embedded-framework-06600
  - technology-usage-embedded-framework-06700
  - technology-usage-embedded-framework-06800
  - technology-usage-embedded-framework-06900
  - technology-usage-embedded-framework-07000
  - technology-usage-embedded-framework-07100
  - technology-usage-embedded-framework-07200
  - technology-usage-embedded-framework-07300
  - technology-usage-embedded-framework-07400
  - technology-usage-embedded-framework-07500
  - technology-usage-embedded-framework-07600
  - technology-usage-embedded-framework-07700
  - technology-usage-embedded-framework-07800
  - technology-usage-embedded-framework-07900
  - technology-usage-embedded-framework-08000
  - technology-usage-embedded-framework-08100
  - technology-usage-embedded-framework-08200
  - technology-usage-embedded-framework-08300
  - technology-usage-embedded-framework-08400
  - technology-usage-embedded-framework-08500
  - technology-usage-embedded-framework-08600
  - technology-usage-embedded-framework-08800
  - technology-usage-embedded-framework-08900
  - technology-usage-embedded-framework-09000
  - technology-usage-embedded-framework-09100
  - embedded-framework-embedded-framework-09200
  - embedded-framework-embedded-framework-09300
  - technology-usage-ejb-01400
  - technology-usage-database-01400
  - technology-usage-database-01500
  - technology-usage-database-01600
  - technology-usage-database-01700
  - technology-usage-database-01800
  - technology-usage-database-01900
  - technology-usage-database-02000
  - technology-usage-database-02100
  - technology-usage-database-02200
  - technology-usage-database-02300
  - technology-usage-database-02400
  - technology-usage-database-02500
  - technology-usage-database-02600
  - technology-usage-database-02700
  - technology-usage-database-02800
  - technology-usage-database-02900
  - technology-usage-database-03100
  - technology-usage-database-03200
  - technology-usage-connect-01101
  - technology-usage-connect-01400
  - technology-usage-connect-01500
  - technology-usage-connect-01600
  - technology-usage-connect-01700
  - technology-usage-connect-01800
  - technology-usage-connect-01900
  - technology-usage-connect-02000
  - technology-usage-connect-02100
  - technology-usage-connect-02200
  - technology-usage-connect-02300
  - technology-usage-connect-02400
  - technology-usage-connect-02500
  - technology-usage-connect-02600
  - technology-usage-connect-02700
  - technology-usage-connect-02800
  - configuration-management-technology-usage-0100
  - configuration-management-technology-usage-0200
  - technology-usage-clustering-01000
  - technology-usage-clustering-02000
  - technology-usage-3rd-party-01000
  - technology-usage-3rd-party-02000
  - technology-usage-3rd-party-03000
  - technology-usage-3rd-party-04000
  - technology-usage-3rd-party-05000
  - technology-usage-3rd-party-06000
  - technology-usage-3rd-party-08000
  - technology-usage-3rd-party-09000
  - technology-usage-3rd-party-10000
  - technology-usage-3rd-party-11000
  - technology-usage-3rd-party-12000
  - technology-usage-3rd-party-13000
  - technology-usage-3rd-party-14000
  - technology-usage-3rd-party-15000
  - technology-usage-3rd-party-16000
  - technology-usage-3rd-party-17000
  - technology-usage-3rd-party-18000
  - technology-usage-3rd-party-19000
  - technology-usage-3rd-party-20000
